[Script Info]
ScriptType: v4.00+
PlayResX: 1920
PlayResY: 1080
LayoutResX: 1920
LayoutResY: 1080
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.709
Original Script: 極彩花夢
Language: CHS_JPN

[Aegisub Project Garbage]
Video File: ?dummy:24000/1001:360:1920:1080:127:127:127:c
Video AR Value: 1.777778
Video Zoom Percent: 0.625000

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Ex-KSY,方正筑紫明朝宋 简繁,60,&H00FFFFFF,&H00FFFFFF,&H00FFFFFF,&H00FFFFFF,0,0,0,0,100,100,0,0,1,0,0,7,0,0,0,1
Style: Ex-invisible,方正筑紫明朝宋 简繁,60,&H00FFFFFF,&H00FFFFFF,&H00FFFFFF,&H00FFFFFF,0,0,0,0,100,100,0,0,1,0,0,7,0,0,0,1
Style: Ex-effects,方正筑紫明朝宋 简繁,60,&H00FFFFFF,&H00FFFFFF,&H00FFFFFF,&H00FFFFFF,0,0,0,0,100,100,0,0,1,0,0,7,0,0,0,1
Style: Sx-zh,方正兰亭圆_GBK_中,62,&H00FFFFFF,&HFFFFFFFF,&H00000000,&H64000000,0,0,0,0,100,100,0,0,1,2.42,0,2,0,0,65,1
Style: Sx-jp,A-OTF Shin Maru Go Pr6N DB,64,&H00FFFFFF,&HFFFFFFFF,&H00000000,&H64000000,0,0,0,0,99,100,0.5,0,1,2.42,0,2,0,0,15,128
Style: Rx-annotation,方正准雅宋_GBK,36,&H1E000000,&H00FFFFFF,&H1EFFFFFF,&H50FFFFFF,0,0,0,0,100,100,0,0,3,1,0,9,70,70,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Comment: 0,0:00:00.00,0:00:00.00,Ex-invisible,,0,0,0,,—— 字幕说明 ——
Comment: 0,0:00:00.00,0:00:00.00,Ex-KSY,AME,0,0,0,,本字幕由「極彩花夢」制作。
Comment: 0,0:00:00.00,0:00:00.00,Ex-KSY,AME,0,0,0,,字幕作品仅供交流学习使用，请勿用于商业用途。
Comment: 0,0:00:00.00,0:00:00.00,Ex-KSY,AME,0,0,0,,您可以自由转载，但请勿修改任何字幕内容。
Comment: 0,0:00:00.00,0:00:00.00,Ex-KSY,AME,0,0,0,,联系邮箱: kyokusaisub@gmail.com
Comment: 0,0:00:00.00,0:00:00.00,Ex-invisible,,0,0,0,,—— 字幕说明 ——
Comment: 0,0:00:00.00,0:00:00.00,Ex-invisible,,0,0,0,,—— EX - 字幕组署名 ——
Comment: 0,0:00:00.00,0:00:00.00,Ex-KSY,,0,0,0,template fx error,
Dialogue: 0,0:00:00.00,0:00:15.00,Ex-KSY,底色,0,0,0,,{\an7\p1\3c&HFFFFFF&\bord20\pos(1600,770)}m -230 -76 l -230 150 l 230 150 l 230 -76
Dialogue: 0,0:00:00.00,0:00:15.00,Ex-KSY,底色,0,0,0,,{\an7\p1\1a&HFF&\3c&HFFFFFF&\bord20\pos(1600,770)\blur.6}m -8 -80 b -56 -123 -187 -77 -263 -90 b -186 -63 -71 -110 -8 -80 m 8 -80 b 56 -123 187 -77 263 -90 b 186 -63 71 -110 8 -80 m -142 157 b -165 126 -225 159 -264 151 b -216 170 -185 139 -142 157 m 142 157 b 165 126 225 159 264 151 b 216 170 185 139 142 157 m -262 105 b -263 107 -259 111 -257 109 b -254 105 -261 103 -262 105 m -262 95 b -264 97 -261 103 -258 101 b -255 99 -259 93 -262 95 m -257 90 b -255 88 -249 92 -252 95 b -255 98 -259 92 -257 90 m -248 90 b -250 92 -247 98 -244 96 b -241 94 -245 88 -248 90 m -253 99 b -258 104 -253 115 -245 108 b -236 100 -249 95 -253 99 m -139 137 b -142 132 -151 128 -153 132 l -169 128 b -169 120 -180 118 -182 126 b -183 135 -171 135 -170 130 l -154 134 b -154 139 -146 140 -139 137 m -178 126 b -177 123 -172 124 -173 128 b -174 131 -179 130 -178 126 m -92 126 b -96 126 -96 132 -92 132 b -88 132 -88 126 -92 126 m -30 126 b -37 126 -37 136 -30 136 b -23 136 -23 126 -30 126 m 19 126 b 15 126 15 132 19 132 b 23 132 23 126 19 126 m 71 123 b 64 123 64 134 71 134 b 78 134 78 123 71 123 m 247 92 b 239 97 249 115 258 110 b 266 105 256 87 247 92 m 249 95 b 251 100 258 100 256 107 b 255 102 247 102 249 95 m 184 28 l 186 31 b 190 33 203 29 204 25 l 202 7 b 194 5 180 10 177 16 l 179 19 b 170 17 173 30 184 28 m 181 15 b 180 13 198 7 199 9 b 200 11 182 17 181 15 m 180 21 l 183 26 b 175 27 173 19 180 21 m 208 -69 b 204 -69 204 -63 208 -63 b 212 -63 212 -69 208 -69 m -188 80 b -201 45 -224 30 -266 30 l -258 39 b -261 66 -246 82 -204 100 b -221 99 -242 117 -243 132 b -230 136 -198 126 -188 111 b -200 115 -217 121 -223 118 b -220 113 -213 105 -204 100 b -221 88 -247 63 -246 45 b -227 57 -208 69 -188 80 m 188 80 b 201 45 224 30 266 30 l 258 39 b 261 66 246 82 204 100 b 221 99 242 117 243 132 b 230 136 198 126 188 111 b 200 115 217 121 223 118 b 220 113 213 105 204 100 b 221 88 247 63 246 45 b 227 57 208 69 188 80 m 203 -20 b 203 24 270 24 270 -20 b 270 -64 203 -64 203 -20 m 227 -51 b 232 -45 253 -39 263 -40 l 272 -56 b 275 -55 278 -60 274 -62 b 271 -63 268 -58 272 -56 b 264 -53 259 -55 259 -64 b 263 -63 264 -69 261 -70 b 258 -71 255 -66 259 -64 b 251 -56 245 -59 244 -68 b 247 -67 249 -73 245 -74 b 241 -75 240 -69 244 -68 b 239 -60 232 -61 228 -68 b 232 -68 232 -74 228 -74 b 224 -74 224 -68 228 -68 l 227 -51
Dialogue: 3,0:00:00.00,0:00:15.00,Ex-KSY,边框,0,0,0,,{\an7\p1\1c&H82B3E7&\pos(1600,770)\blur.3}m -8 -80 b -56 -123 -187 -77 -263 -90 b -186 -63 -71 -110 -8 -80 m 8 -80 b 56 -123 187 -77 263 -90 b 186 -63 71 -110 8 -80 m -142 157 b -165 126 -225 159 -264 151 b -216 170 -185 139 -142 157 m 142 157 b 165 126 225 159 264 151 b 216 170 185 139 142 157
Dialogue: 3,0:00:00.00,0:00:15.00,Ex-KSY,物件,0,0,0,,{\an7\p1\1c&H82B3E7&\pos(1600,770)\blur.3}m -262 105 b -263 107 -259 111 -257 109 b -254 105 -261 103 -262 105 m -262 95 b -264 97 -261 103 -258 101 b -255 99 -259 93 -262 95 m -257 90 b -255 88 -249 92 -252 95 b -255 98 -259 92 -257 90 m -248 90 b -250 92 -247 98 -244 96 b -241 94 -245 88 -248 90 m -253 99 b -258 104 -253 115 -245 108 b -236 100 -249 95 -253 99 m -139 137 b -142 132 -151 128 -153 132 l -169 128 b -169 120 -180 118 -182 126 b -183 135 -171 135 -170 130 l -154 134 b -154 139 -146 140 -139 137 m -178 126 b -177 123 -172 124 -173 128 b -174 131 -179 130 -178 126 m -92 126 b -96 126 -96 132 -92 132 b -88 132 -88 126 -92 126 m -30 126 b -37 126 -37 136 -30 136 b -23 136 -23 126 -30 126 m 19 126 b 15 126 15 132 19 132 b 23 132 23 126 19 126 m 71 123 b 64 123 64 134 71 134 b 78 134 78 123 71 123 m 247 92 b 239 97 249 115 258 110 b 266 105 256 87 247 92 m 249 95 b 251 100 258 100 256 107 b 255 102 247 102 249 95 m 184 28 l 186 31 b 190 33 203 29 204 25 l 202 7 b 194 5 180 10 177 16 l 179 19 b 170 17 173 30 184 28 m 181 15 b 180 13 198 7 199 9 b 200 11 182 17 181 15 m 180 21 l 183 26 b 175 27 173 19 180 21 m 208 -69 b 204 -69 204 -63 208 -63 b 212 -63 212 -69 208 -69
Dialogue: 3,0:00:00.00,0:00:15.00,Ex-KSY,物件,0,0,0,,{\an7\p1\1c&H82B3E7&\pos(1600,770)\blur.3}m -181 -67 b -186 -67 -186 -60 -181 -60 b -176 -60 -176 -67 -181 -67 m -178 31 b -186 26 -198 44 -190 49 b -180 55 -170 36 -178 31 m -180 34 b -183 36 -180 46 -188 46 b -184 44 -187 35 -180 34 m -25 24 b -29 24 -29 30 -25 30 b -21 30 -21 24 -25 24 m 102 21 b 99 20 96 26 99 27 b 103 29 104 22 102 21 m 111 19 b 109 17 103 22 107 25 b 110 27 113 20 111 19 m 117 23 b 115 21 109 27 114 29 b 117 31 120 24 117 23 m 119 31 b 117 30 112 35 115 37 b 118 39 122 32 119 31 m 110 29 b 104 25 93 32 103 39 b 113 45 116 33 110 29 m 40 33 b 36 33 36 39 40 39 b 44 39 44 33 40 33 m -70 2 b -73 0 -77 9 -95 30 b -100 26 -114 39 -107 45 b -100 52 -88 37 -93 32 b -76 10 -67 4 -70 2 m -67 -53 b -71 -53 -71 -46 -67 -46 b -63 -46 -63 -53 -67 -53
Dialogue: 3,0:00:00.00,0:00:15.00,Ex-KSY,翅膀,0,0,0,,{\an7\p1\1c&HB075A6&\pos(1600,770)\blur.4}m -188 80 b -201 45 -224 30 -266 30 l -258 39 b -261 66 -246 82 -204 100 b -221 99 -242 117 -243 132 b -230 136 -198 126 -188 111 b -200 115 -217 121 -223 118 b -220 113 -213 105 -204 100 b -221 88 -247 63 -246 45 b -227 57 -208 69 -188 80 m 188 80 b 201 45 224 30 266 30 l 258 39 b 261 66 246 82 204 100 b 221 99 242 117 243 132 b 230 136 198 126 188 111 b 200 115 217 121 223 118 b 220 113 213 105 204 100 b 221 88 247 63 246 45 b 227 57 208 69 188 80
Dialogue: 0,0:00:00.00,0:00:15.00,Ex-KSY,底色,0,0,0,,{\an7\p1\1c&HFFFFFF&\bord26\fscx1080\fscy1080\pos(1600,694)\blur.6}m 0 -10 b -6 -10 -10 -5 -10 0 b -10 5 -5 10 0 10 b 6 10 10 5 10 0 b 10 -5 6 -10 0 -10
Dialogue: 1,0:00:00.00,0:00:15.00,Ex-KSY,时钟,0,0,0,,{\an7\p1\1a&HFF&\3c&H82B3E7&\bord4\fscx1000\fscy1000\pos(1600,694)\blur.3}m 0 -10 b -6 -10 -10 -5 -10 0 b -10 5 -5 10 0 10 b 6 10 10 5 10 0 b 10 -5 6 -10 0 -10
Dialogue: 1,0:00:00.00,0:00:15.00,Ex-KSY,时钟,0,0,0,,{\an7\p1\1a&HFF&\3c&H82B3E7&\bord10\fscx1080\fscy1080\pos(1600,694)\blur.3}m 0 -10 b -6 -10 -10 -5 -10 0 b -10 5 -5 10 0 10 b 6 10 10 5 10 0 b 10 -5 6 -10 0 -10
Dialogue: 2,0:00:00.00,0:00:15.00,Ex-KSY,掩盖,0,0,0,,{\an7\p1\3c&HFFFFFF&\bord20\pos(1600,770)\blur16}m -200 -20 l -200 50 l 200 50 l 200 -20
Dialogue: 1,0:00:00.00,0:00:15.00,Ex-KSY,刻度,0,0,0,,{\an8\1c&H82B3E7&\3c&H82B3E7&\bord.3\pos(1600,589)\org(1600,694)\frz0\fnJosefin Sans SemiBold\fs28\blur.3}12
Dialogue: 1,0:00:00.00,0:00:15.00,Ex-KSY,刻度,0,0,0,,{\an8\1c&H82B3E7&\3c&H82B3E7&\bord.3\pos(1600,589)\org(1600,694)\frz30\fnJosefin Sans SemiBold\fs28\blur.3}11
Dialogue: 1,0:00:00.00,0:00:15.00,Ex-KSY,刻度,0,0,0,,{\an8\1c&H82B3E7&\3c&H82B3E7&\bord.3\pos(1600,589)\org(1600,694)\frz60\fnJosefin Sans SemiBold\fs28\blur.3}10
Dialogue: 1,0:00:00.00,0:00:15.00,Ex-KSY,刻度,0,0,0,,{\an8\1c&H82B3E7&\3c&H82B3E7&\bord.3\pos(1600,589)\org(1600,694)\frz90\fnJosefin Sans SemiBold\fs28\blur.3}9
Dialogue: 1,0:00:00.00,0:00:15.00,Ex-KSY,刻度,0,0,0,,{\an8\1c&H82B3E7&\3c&H82B3E7&\bord.3\pos(1600,589)\org(1600,694)\frz120\fnJosefin Sans SemiBold\fs28\blur.3}8
Dialogue: 1,0:00:00.00,0:00:15.00,Ex-KSY,刻度,0,0,0,,{\an8\1c&H82B3E7&\3c&H82B3E7&\bord.3\pos(1600,589)\org(1600,694)\frz240\fnJosefin Sans SemiBold\fs28\blur.3}4
Dialogue: 1,0:00:00.00,0:00:15.00,Ex-KSY,刻度,0,0,0,,{\an8\1c&H82B3E7&\3c&H82B3E7&\bord.3\pos(1600,589)\org(1600,694)\frz270\fnJosefin Sans SemiBold\fs28\blur.3}3
Dialogue: 1,0:00:00.00,0:00:15.00,Ex-KSY,刻度,0,0,0,,{\an8\1c&H82B3E7&\3c&H82B3E7&\bord.3\pos(1600,589)\org(1600,694)\frz300\fnJosefin Sans SemiBold\fs28\blur.3}2
Dialogue: 1,0:00:00.00,0:00:15.00,Ex-KSY,刻度,0,0,0,,{\an8\1c&H82B3E7&\3c&H82B3E7&\bord.3\pos(1600,589)\org(1600,694)\frz330\fnJosefin Sans SemiBold\fs28\blur.3}1
Dialogue: 1,0:00:00.00,0:00:15.00,Ex-KSY,时针,0,0,0,,{\an7\p1\1c&H82B3E7&\pos(1600,694)\frz2000\t(0,1200,.42,\frz120\t(1200,2000,.2,\frz0))\fscx140\fscy140\blur.3}m 0 6 b -8 6 -7 -5 -1 -5 l -1 -28 l -4 -33 b -11 -32 -12 -43 -5 -44 l -6 -46 l 0 -57 l 6 -46 l 5 -44 b 12 -43 11 -32 4 -33 l 1 -28 l 1 -5 b 7 -5 8 6 0 6 m 0 -32 l 1 -34 l 0 -36 l -1 -34 l 0 -32 m -1 -38 b -1 -42 -7 -42 -7 -38 b -7 -34 -1 -34 -1 -38 m 1 -38 b 1 -34 7 -34 7 -38 b 7 -42 1 -42 1 -38 m 0 -52 b -2 -49 -5 -43 0 -43 b 5 -43 2 -49 0 -52
Dialogue: 3,0:00:00.00,0:00:15.00,Ex-KSY,底色,0,0,0,,{\an7\p1\1c&H816CEC&\pos(1600,770)\blur.3}m 203 -20 b 203 24 270 24 270 -20 b 270 -64 203 -64 203 -20
Dialogue: 4,0:00:00.00,0:00:15.00,Ex-KSY,王冠,0,0,0,,{\an7\p1\1c&H82B3E7&\pos(1600,770)\blur.3}m 227 -51 b 232 -45 253 -39 263 -40 l 272 -56 b 275 -55 278 -60 274 -62 b 271 -63 268 -58 272 -56 b 264 -53 259 -55 259 -64 b 263 -63 264 -69 261 -70 b 258 -71 255 -66 259 -64 b 251 -56 245 -59 244 -68 b 247 -67 249 -73 245 -74 b 241 -75 240 -69 244 -68 b 239 -60 232 -61 228 -68 b 232 -68 232 -74 228 -74 b 224 -74 224 -68 228 -68 l 227 -51
Dialogue: 5,0:00:00.00,0:00:15.00,Ex-KSY,看板娘,0,0,0,,{\an7\p1\1c&HFFFFFF&\pos(1836,750)\fscx8\fscy8}m 119.02 -1.9 bm 87.24 -5.69 b 86.31 -8.75 85.23 -11.66 83.97 -14.51 82.17 -18.57 80.42 -22.66 78.61 -26.73 76.43 -31.64 74.46 -36.65 72.61 -41.69 71.19 -45.55 69.69 -49.38 68.61 -53.36 67.56 -57.26 66.32 -61.11 65.15 -64.99 65.03 -65.39 65.09 -65.96 64.24 -65.99 63.99 -64.36 63.02 -62.9 63.08 -61.12 63.14 -59.26 62.97 -57.39 63.12 -55.54 63.33 -52.77 63.68 -50.01 64.58 -47.37 65.1 -45.85 65.45 -44.32 65.47 -42.72 65.49 -40.45 65.47 -38.19 65.47 -35.93 65.47 -35.34 65.36 -34.72 65.79 -34.21 67.71 -31.9 68.04 -29.04 68.71 -26.27 69.12 -24.56 69.65 -22.89 71.09 -21.6 72.42 -20.42 73.53 -18.97 74.61 -17.55 77.01 -14.36 79.47 -11.24 82.72 -8.86 84.2 -7.78 85.49 -6.43 87.24 -5.69 m -25.78 -166.67 b -25.81 -166.71 -25.84 -166.76 -25.87 -166.8 -25.91 -166.77 -25.98 -166.73 -25.99 -166.69 -26.01 -166.54 -25.94 -166.47 -25.83 -166.52 -25.8 -166.54 -25.79 -166.62 -25.78 -166.67 m -25.39 -165.43 b -25.41 -165.49 -25.44 -165.54 -25.47 -165.59 -25.5 -165.55 -25.56 -165.5 -25.56 -165.45 -25.57 -165.4 -25.52 -165.35 -25.49 -165.3 -25.46 -165.34 -25.42 -165.39 -25.39 -165.43 m -110.46 -94.71 b -110.72 -93.54 -111.07 -92.37 -110.84 -91.15 -112.58 -91.45 -114.34 -91.69 -116.07 -92.08 -117.21 -92.34 -117.29 -92.9 -116.56 -93.8 -115.54 -95.05 -114.5 -95.96 -112.73 -95.12 -112.06 -94.8 -111.15 -95.3 -110.46 -94.71 m 55.03 -164.34 b 55.37 -162.34 54.66 -160.43 54.17 -158.52 53.65 -156.48 51.97 -155.21 50.47 -153.92 49.36 -152.97 48.27 -152.01 47.21 -150.99 46.28 -150.1 45.22 -149.44 43.96 -149.13 42.64 -148.81 42.27 -149.09 42.28 -150.48 42.3 -153.07 42.82 -155.61 43.23 -158.16 43.5 -159.85 43.87 -161.57 43.85 -163.27 43.83 -167.23 46.08 -169.83 48.88 -172.07 50.56 -173.41 52.49 -172.83 53.54 -170.87 54.62 -168.86 55.34 -166.73 55.03 -164.34 m 74.3 -107.48 b 73.5 -107.48 72.7 -107.48 71.9 -107.46 69.72 -107.4 67.54 -107.55 65.35 -107.12 63.02 -106.66 60.59 -106.7 58.28 -106.19 56.66 -105.83 55.08 -105.21 53.41 -105.47 50.17 -105.97 46.91 -105.65 43.67 -105.91 42.17 -106.03 40.7 -106.56 39.28 -107.13 38.11 -107.59 37.84 -107.45 37.9 -106.16 38.01 -103.58 37.73 -100.99 38.2 -98.4 38.55 -96.46 38.39 -94.44 38.64 -92.45 39.17 -88.12 39.46 -83.76 39.93 -79.42 40.13 -77.56 41.06 -75.9 41.63 -74.13 41.78 -73.67 42.15 -73.35 42.59 -73.17 45.24 -72.1 47.58 -70.51 49.99 -68.99 51.69 -67.92 53.47 -66.9 55.19 -65.83 57.43 -64.45 59.26 -62.64 60.62 -60.39 60.94 -59.86 61.35 -59.45 61.75 -59.01 62.15 -58.58 62.7 -58.23 62.61 -57.36 61.53 -57.61 60.8 -58.3 60.12 -59.04 58.13 -61.21 55.83 -63.06 53.28 -64.45 50.74 -65.85 48.23 -67.47 45.39 -68.21 41.11 -69.32 38.87 -72.46 37.06 -76.11 35.36 -79.55 34.77 -83.26 34.23 -87.02 33.5 -92.14 32.93 -97.26 32.61 -102.42 32.49 -104.27 32.16 -106.14 32.34 -107.98 32.71 -111.82 32.42 -115.7 32.78 -119.52 33.11 -122.94 33.3 -126.38 33.72 -129.8 34.2 -133.66 34.8 -137.53 35.16 -141.42 35.46 -144.63 36.17 -147.81 36.56 -151.05 35.09 -149.52 34.37 -147.62 33.91 -145.61 33.49 -143.8 32.82 -142.08 32.25 -140.32 31.68 -138.58 31.11 -136.81 31.1 -134.93 31.1 -134.21 31.1 -133.48 30.95 -132.74 30.51 -133.86 30.82 -135.08 30.39 -136.21 29.94 -137.42 30.67 -138.66 30.43 -139.93 28.94 -136.36 28.51 -132.56 28.09 -128.75 27.51 -134.37 28.19 -139.83 30.37 -145.12 28.86 -145.29 28.52 -143.7 27.44 -143.56 27.19 -143.83 27.21 -144.03 27.34 -144.19 31.31 -149.11 33.32 -154.96 34.92 -160.93 35.56 -163.32 36.18 -165.83 35.91 -168.39 35.79 -169.47 36.21 -170.48 36.33 -171.54 36.71 -175.06 36.04 -178.52 35.89 -182.01 35.86 -182.58 35.69 -183.04 35.3 -183.44 34.71 -184.06 34.13 -184.68 33.27 -185.6 32.88 -183.14 34.77 -181.45 34.53 -179.26 33.58 -179.8 34 -180.86 33.5 -181.52 32.99 -182.2 32.73 -183.06 32.35 -183.84 30.97 -186.69 29.34 -189.33 26.99 -191.57 24.83 -193.63 22.51 -195.46 20.2 -197.32 19.94 -197.53 19.7 -197.77 19.06 -197.55 19.67 -195.47 20.81 -193.62 21.77 -191.71 22.76 -189.75 23.63 -187.74 24.83 -185.89 26.02 -184.08 27.89 -182.82 28.98 -180.84 27.82 -180.39 26.97 -180.76 26.23 -181.35 23.58 -183.44 20.87 -185.49 18.99 -188.38 18.82 -188.65 18.58 -188.9 18.32 -189.1 18.19 -189.21 17.92 -189.26 17.79 -189.19 17.66 -189.12 17.51 -188.81 17.57 -188.71 17.94 -188.02 17.93 -187.22 18.38 -186.51 19.24 -185.15 20.12 -183.74 20.58 -182.11 19.79 -181.9 19.5 -182.42 19.24 -182.83 18.33 -184.29 17.38 -185.75 16.59 -187.28 15.5 -189.4 14.27 -191.44 12.98 -193.51 12.8 -192.32 12.98 -191.65 13.93 -189.3 14.51 -187.88 14.96 -186.42 15.56 -185.02 16.17 -183.61 16.85 -182.24 17.59 -180.89 18.31 -179.57 19.13 -178.3 19.93 -176.96 18.28 -176.56 18.28 -176.56 16.68 -177.94 16.26 -178.02 16.3 -177.67 16.28 -177.44 16.18 -176.55 15.71 -176.55 15.29 -177.13 14.58 -178.09 13.9 -179.09 13.39 -180.16 12.36 -182.32 11.22 -184.42 10.58 -186.75 10.41 -187.37 10.01 -187.92 9.65 -188.62 8.9 -188 9.15 -187.37 9.25 -186.75 9.74 -183.86 10.9 -181.17 11.65 -178.36 11.82 -177.74 12.02 -177.13 12.02 -176.42 10.42 -177.45 10.26 -179.49 8.95 -180.91 8.33 -179.57 9.09 -178.49 9.18 -177.38 9.2 -177.12 9.4 -176.88 9.43 -176.62 9.52 -175.88 10.42 -175 9.56 -174.44 8.74 -173.92 7.59 -174 6.7 -174.54 5.29 -175.39 4.46 -176.76 3.85 -178.26 2.92 -180.54 2.2 -182.88 1.85 -185.32 1.81 -185.58 1.7 -185.84 1.39 -185.91 0.99 -184.1 2.14 -176.87 3.65 -171.87 2.29 -171.87 0.97 -171.72 -0.31 -171.91 -1.77 -172.13 -3 -172.86 -3.92 -174.15 -5.25 -175.99 -6.18 -178.04 -7.24 -180.24 -8.3 -178.54 -7.09 -176.94 -7.45 -174.97 -10.15 -180.73 -11.23 -186.56 -12.84 -192.26 -12.77 -190.01 -13.11 -187.78 -12.62 -185.52 -12.24 -183.78 -12.6 -181.96 -12.14 -180.18 -11.94 -179.43 -11.9 -178.63 -11.54 -177.9 -11.21 -177.23 -11.26 -176.54 -11.4 -175.44 -13.93 -180.11 -14.81 -184.91 -16.03 -189.62 -17.02 -187.36 -15.88 -185.12 -16.08 -182.88 -16.31 -180.48 -15.76 -178.15 -15.34 -175.79 -14.93 -173.53 -13.61 -171.57 -13.27 -169 -16.03 -170.24 -16.62 -172.7 -17.57 -174.89 -18.26 -174.57 -18.15 -174 -18.02 -173.65 -17.63 -172.63 -17.83 -171.53 -17.45 -170.52 -17.26 -170.01 -17.16 -169.47 -17.67 -169.06 -17.97 -168.82 -18.13 -168.51 -18 -168.19 -17.49 -166.9 -18.25 -166.74 -19.25 -166.62 -22.3 -166.24 -23.37 -166.76 -24.99 -169.65 -25.8 -171.1 -26.55 -172.59 -26.9 -174.24 -26.95 -174.48 -26.94 -174.79 -27.48 -174.81 -27.59 -172.36 -26.52 -170.08 -26.48 -167.65 -28.75 -171.75 -29.13 -176.39 -30.22 -180.79 -30.99 -180.82 -30.92 -180.28 -30.81 -179.97 -30.37 -178.67 -30.51 -177.34 -30.5 -176.02 -30.44 -171.63 -30.21 -167.27 -29.35 -162.96 -29.34 -162.89 -29.31 -162.82 -29.32 -162.76 -29.78 -160.13 -28.24 -158.29 -26.93 -156.27 -24.18 -152.04 -21.3 -147.88 -19.03 -143.36 -17.87 -141.05 -16.92 -138.62 -15.63 -136.39 -14.38 -134.24 -12.53 -132.53 -10.3 -131.42 -6.99 -129.76 -3.65 -128.16 0.02 -127.29 2.78 -126.64 5.42 -125.46 8.11 -124.51 8.96 -124.21 9.43 -123.56 9.46 -122.71 9.55 -120.52 10.15 -118.37 9.92 -116.17 9.88 -115.84 9.92 -115.5 9.86 -115.17 9.58 -113.67 9.32 -113.49 7.76 -113.43 5.29 -113.32 2.87 -113.69 0.45 -114.11 -0.46 -114.26 -1.41 -114.25 -2.34 -114.22 -6.28 -114.12 -10.11 -114.84 -13.97 -115.51 -18.16 -116.25 -22.36 -116.2 -26.54 -114.7 -31.14 -113.05 -33.47 -109.58 -35.09 -105.4 -36.65 -101.37 -37.45 -97.16 -37.75 -92.81 -38.04 -88.53 -39.04 -84.28 -39.14 -80 -39.21 -76.85 -40.33 -74.95 -42.82 -73.12 -45.25 -71.35 -47.4 -69.07 -49.22 -66.58 -49.6 -66.06 -50.02 -65.48 -50.78 -65.44 -50.01 -69.63 -49.26 -73.82 -48.45 -78.01 -47.74 -81.62 -46.93 -85.21 -46.22 -88.81 -45.46 -92.67 -44.78 -96.55 -44.04 -100.42 -43.44 -103.5 -42.81 -106.57 -42.16 -109.64 -42.06 -110.11 -41.91 -110.58 -42.04 -111.02 -42.56 -112.91 -42.08 -114.97 -43.07 -116.79 -43.24 -117.1 -43.23 -117.58 -43.14 -117.95 -42.5 -120.63 -42.94 -123.37 -42.58 -126.09 -42.18 -129.04 -41.83 -132.01 -41.49 -134.97 -41.14 -138.09 -41.42 -141.22 -41.25 -144.34 -42.22 -145.63 -41.18 -146.92 -41.25 -148.22 -41.39 -150.79 -41.57 -153.34 -42.06 -155.89 -42.62 -158.75 -42.73 -161.69 -43.26 -164.55 -44.11 -169.16 -44.54 -173.8 -44.95 -178.46 -45.35 -182.92 -45.42 -187.37 -45.2 -191.81 -45.03 -195.22 -44.68 -198.61 -43.89 -201.98 -42.94 -206.02 -41.86 -210.01 -40.58 -213.94 -39.78 -216.42 -38.95 -219.01 -37.23 -221 -33.83 -224.95 -30.87 -229.24 -27.13 -232.92 -22.55 -237.41 -17.05 -239.72 -10.83 -240.58 -8.67 -240.88 -6.59 -241.2 -4.51 -242.06 -1.32 -243.37 2.08 -244.09 5.57 -244.27 11.57 -244.58 17.5 -244.22 23.32 -242.62 27.78 -241.39 31.84 -239.27 35.93 -237.16 40.32 -234.9 44.08 -231.77 47.26 -228.15 49.62 -225.46 51.8 -222.46 53.43 -219.16 55.36 -215.25 57.43 -211.41 59.18 -207.42 60.2 -205.09 60.77 -202.55 61.44 -200.08 62.12 -197.54 62.73 -194.98 63.27 -192.41 63.56 -191.05 63.68 -189.66 63.82 -188.27 64.48 -181.7 64.57 -175.1 64.16 -168.53 63.85 -163.56 63.5 -158.6 63.37 -153.61 63.33 -151.84 62.94 -150.02 63.15 -148.26 63.54 -145.01 63.25 -141.75 63.5 -138.52 63.73 -135.53 64.69 -132.68 65.46 -129.8 67.25 -123.13 69.47 -116.6 72.71 -110.46 73.23 -109.46 73.77 -108.48 74.3 -107.48 m 55.03 -164.34 b 55.34 -166.73 54.62 -168.86 53.54 -170.87 52.49 -172.83 50.56 -173.41 48.88 -172.07 46.08 -169.83 43.83 -167.23 43.85 -163.27 43.87 -161.57 43.5 -159.85 43.23 -158.16 42.82 -155.61 42.3 -153.07 42.28 -150.48 42.27 -149.09 42.64 -148.81 43.96 -149.13 45.22 -149.44 46.28 -150.1 47.21 -150.99 48.27 -152.01 49.36 -152.97 50.47 -153.92 51.97 -155.21 53.65 -156.48 54.17 -158.52 54.66 -160.43 55.37 -162.34 55.03 -164.34 m -57.78 -35.61 b -57.67 -34.76 -57.42 -33.95 -57.14 -33.13 -56.2 -30.3 -55.37 -27.43 -54.52 -24.57 -54.07 -23.05 -53.66 -21.52 -53.23 -19.99 -52.36 -16.87 -51.83 -13.68 -51.2 -10.51 -50.79 -8.52 -50.04 -6.58 -49.08 -4.75 -48.6 -3.82 -47.66 -3.52 -46.86 -3.22 -45.91 -2.85 -45.65 -2.31 -45.68 -1.43 -45.71 -0.34 -45.41 0.7 -45.04 1.67 -43.16 6.65 -41.79 11.76 -40.95 17 -40.32 20.84 -39.87 24.71 -39.24 28.55 -38.94 30.44 -38.51 32.33 -37.96 34.17 -36.94 37.61 -36.64 41.18 -36.13 44.71 -35.65 47.98 -35.13 51.26 -35.27 54.59 -35.29 55.25 -35.33 55.92 -35.36 56.58 -37.4 55.11 -39.14 53.31 -40.89 51.55 -42.09 50.34 -43.19 49.01 -44.48 47.89 -45.37 47.12 -45.82 45.97 -46.83 45.18 -47.26 45.82 -46.94 46.31 -46.77 46.73 -44.72 51.97 -42.33 57.04 -39.09 61.67 -38.82 62.05 -38.5 62.39 -38.49 62.89 -38.49 62.89 -38.46 62.86 -38.46 62.86 -38.93 62.89 -39.39 62.86 -39.78 62.54 -42.44 60.38 -45.38 58.63 -48.33 56.93 -49.14 56.47 -49.57 55.48 -50.75 55.4 -50.7 56.87 -49.47 57.64 -48.78 58.66 -48.08 59.69 -47.1 60.55 -46.21 61.44 -45.3 62.36 -44.33 63.24 -43.35 64.18 -43.98 64.46 -44.43 64.15 -44.73 63.91 -46.26 62.67 -48.07 61.72 -49.3 60.18 -50.93 58.13 -53.21 57.11 -55.35 55.83 -57.1 54.79 -58.94 53.9 -60.81 52.56 -62.27 57.11 -62.33 61.68 -62.01 66.33 -66.33 61.63 -68.36 56.01 -68.94 49.76 -69.46 51.4 -69.17 53.08 -69.58 54.68 -71.95 49.4 -72.32 43.97 -71.01 38.36 -74.16 43.71 -76.56 49.34 -78.18 55.57 -78.9 54.22 -79.38 53.08 -79.22 51.74 -78.93 49.25 -78.67 46.77 -78.02 44.33 -76.88 40.08 -75.73 35.84 -74.47 31.62 -74.19 30.7 -74.31 29.66 -75.28 28.89 -76.16 29.91 -76.02 31.35 -77 32.36 -79.16 29.97 -78.5 26.8 -79.58 24.13 -79.58 25.43 -79.58 26.74 -79.58 28.04 -79.66 28.06 -79.75 28.08 -79.83 28.11 -80.11 27.46 -80.38 26.81 -80.78 25.87 -80.82 28.52 -80.23 30.72 -79.36 32.85 -82.27 34.12 -83.93 33.26 -85.9 29.5 -86.84 30.81 -86.15 32.36 -86.58 33.93 -87.29 32.98 -87.6 32.05 -87.62 31.03 -87.69 25.33 -87.15 19.74 -85.48 14.21 -83.16 6.49 -79.8 -0.73 -75.84 -7.71 -74.54 -10 -72.72 -11.98 -71.71 -14.45 -69.58 -19.62 -66.79 -24.41 -63.61 -28.98 -61.92 -31.4 -60.26 -33.88 -57.78 -35.61 m 53.37 50.52 b 51.7 49.46 50.7 47.81 49.73 46.18 47.65 42.69 45.91 39.03 44.13 35.39 42.29 31.62 40.73 27.75 40.07 23.58 39.75 21.52 40.24 19.47 40.84 17.54 42.37 12.65 44.5 8.01 47.04 3.56 47.66 2.47 48.36 1.42 48.94 0.31 49.44 -0.64 50.12 -0.9 51.07 -0.52 54.02 0.66 57.09 0.93 60.23 0.97 62.13 1 63.97 1.72 65.9 1.83 67 1.9 67.97 2.69 68.75 3.55 70.76 5.76 73.11 7.62 75.25 9.68 77.07 11.44 79.18 12.83 81.06 14.5 83.39 16.56 85.93 18.4 87.87 20.87 87.19 21.84 87.54 22.89 87.64 23.92 87.99 27.7 88.03 31.48 87.53 35.25 87.5 35.43 87.38 35.63 86.86 35.6 85.89 32.14 84.92 28.59 84.18 24.96 83.61 26.07 84.23 27.1 84.24 28.16 84.32 34.01 84.09 39.84 83.03 45.62 82.69 47.49 81.84 49.18 80.54 50.66 81.2 48.95 80.97 47.19 81.04 45.45 81.1 43.91 80.9 42.34 80.54 40.91 79.9 38.41 80.16 35.8 79.24 33.32 78.88 32.32 78.66 31.04 78.66 29.84 78.67 29.36 78.77 28.75 78.04 28.39 76.24 38.41 72.42 47.41 65.31 54.82 71.29 44.89 73.7 34.05 73.79 22.59 72.72 24.39 72.2 26.41 71.53 28.35 70.77 30.55 69.97 32.73 68.89 34.79 68.08 36.34 67.81 38.06 67.28 39.69 66.7 41.45 66.16 43.23 65.48 44.96 64.8 46.66 64.16 48.4 64.27 50.6 62.4 49.14 63.54 47.25 62.88 45.65 60.25 47.25 58.16 49.61 55.06 50.52 55.08 49.41 56.17 49 55.87 48.08 56.26 48.13 56.47 47.96 56.52 47.58 56.53 47.54 56.45 47.44 56.41 47.44 55.98 47.45 55.93 47.77 55.88 48.09 54.88 48.73 54.26 49.77 53.37 50.52 m -103.73 -63.28 b -103.77 -63.33 -103.8 -63.37 -103.84 -63.42 -103.88 -63.38 -103.95 -63.34 -103.95 -63.3 -103.96 -63.25 -103.89 -63.2 -103.85 -63.16 -103.81 -63.2 -103.77 -63.24 -103.73 -63.28 m -107.45 -73.57 l -107.38 -73.69 -107.49 -73.7 -107.45 -73.57 m 119.02 -1.9 b 117.41 -4.97 116.43 -8.29 115.12 -11.47 114.01 -14.16 112.73 -16.8 112.02 -19.63 110.55 -25.42 108.02 -30.85 106.36 -36.57 105.55 -39.37 104.91 -42.22 103.97 -44.98 103.73 -45.68 103.32 -46.3 103.11 -46.93 102.2 -49.65 100.86 -52.29 100.97 -55.26 100.99 -55.91 100.7 -56.41 100.64 -56.99 100.59 -57.41 100.06 -57.8 100.56 -58.26 101.98 -57.2 102.67 -55.58 103.59 -54.16 106.04 -50.38 108.43 -46.56 110.73 -42.69 113.37 -38.24 115.78 -33.67 117.04 -28.59 117.81 -25.5 117.76 -22.41 116.63 -19.41 116.19 -18.27 116.25 -17.32 116.79 -16.21 118.34 -13.02 119 -9.57 119.4 -6.07 119.56 -4.67 119.91 -3.22 119.02 -1.9 m 54.64 50.66 b 54.6 50.69 54.55 50.75 54.51 50.75 54.47 50.75 54.44 50.68 54.4 50.64 54.45 50.61 54.49 50.55 54.53 50.55 54.57 50.55 54.6 50.62 54.64 50.66 m -38.07 63.26 b -38.33 63.26 -38.46 63.12 -38.46 62.86 -38.46 62.86 -38.49 62.89 -38.49 62.89 -38.28 62.94 -38.14 63.07 -38.09 63.28 l -38.07 63.26 m -38.09 63.28 b -38.05 63.31 -38 63.34 -37.96 63.37 -38 63.33 -38.03 63.3 -38.07 63.26 -38.07 63.26 -38.09 63.28 -38.09 63.28 m -163.64 205.99 b -163.73 206.15 -163.81 206.3 -163.89 206.45 -164.02 206.18 -163.88 206.07 -163.64 205.99 m 87.24 -5.69 b 85.49 -6.43 84.2 -7.78 82.72 -8.86 79.47 -11.24 77.01 -14.36 74.61 -17.55 73.53 -18.97 72.42 -20.42 71.09 -21.6 69.65 -22.89 69.12 -24.56 68.71 -26.27 68.04 -29.04 67.71 -31.9 65.79 -34.21 65.36 -34.72 65.47 -35.34 65.47 -35.93 65.47 -38.19 65.49 -40.45 65.47 -42.72 65.45 -44.32 65.1 -45.85 64.58 -47.37 63.68 -50.01 63.33 -52.77 63.12 -55.54 62.97 -57.39 63.14 -59.26 63.08 -61.12 63.02 -62.9 63.99 -64.36 64.24 -65.99 65.09 -65.96 65.03 -65.39 65.15 -64.99 66.32 -61.11 67.56 -57.26 68.61 -53.36 69.69 -49.38 71.19 -45.55 72.61 -41.69 74.46 -36.65 76.43 -31.64 78.61 -26.73 80.42 -22.66 82.17 -18.57 83.97 -14.51 85.23 -11.66 86.31 -8.75 87.24 -5.69 m -96.06 -91.11 b -95.93 -91.1 -95.8 -91.11 -95.68 -91.08 -95.37 -91.01 -94.94 -90.98 -95.07 -90.54 -95.19 -90.14 -95.58 -90.23 -95.88 -90.37 -96.05 -90.46 -96.2 -90.59 -96.35 -90.7 -96.26 -90.84 -96.16 -90.97 -96.06 -91.11 m -25.78 -166.67 b -25.79 -166.62 -25.8 -166.54 -25.83 -166.52 -25.94 -166.47 -26.01 -166.54 -25.99 -166.69 -25.98 -166.73 -25.91 -166.77 -25.87 -166.8 -25.84 -166.76 -25.81 -166.71 -25.78 -166.67 m -25.39 -165.43 b -25.42 -165.39 -25.46 -165.34 -25.49 -165.3 -25.52 -165.35 -25.57 -165.4 -25.56 -165.45 -25.56 -165.5 -25.5 -165.55 -25.47 -165.59 -25.44 -165.54 -25.41 -165.49 -25.39 -165.43 m -107.24 -94.17 b -107.05 -92.87 -107.48 -91.5 -106.84 -90.25 -106.87 -88.65 -106.9 -87.05 -106.94 -85.46 -106.97 -84.06 -106.92 -82.68 -107.2 -81.29 -107.43 -80.14 -107.33 -78.93 -106.94 -77.75 -105.88 -74.46 -104.91 -71.15 -103.9 -67.85 -103.8 -67.53 -103.72 -67.2 -103.57 -66.91 -102.67 -65.2 -102.12 -63.37 -101.69 -61.49 -101.46 -60.51 -100.93 -59.77 -100.11 -59.08 -97.58 -56.93 -95.87 -54.19 -94.98 -50.97 -94.58 -49.51 -94.19 -48.03 -93.76 -46.57 -92.95 -43.75 -93.04 -40.85 -92.89 -37.97 -92.77 -35.72 -92.62 -33.47 -92.23 -31.26 -92.16 -30.84 -92.28 -30.47 -92.35 -30.08 -92.6 -28.56 -92.61 -27.01 -92.4 -25.5 -91.94 -22.2 -92.26 -18.94 -93.63 -15.99 -94.83 -13.4 -94.91 -10.89 -94.4 -8.26 -94.06 -6.46 -94 -4.72 -94.47 -2.95 -94.95 -1.18 -94.65 0.68 -95.27 2.46 -95.96 4.47 -96.61 6.56 -97.86 8.22 -99.03 9.76 -100.68 10.98 -102.52 11.81 -102.9 11.97 -103.31 12.02 -103.7 11.89 -104.88 11.51 -106.1 11.58 -107.25 11.83 -108.3 12.06 -108.68 11.55 -108.75 10.79 -108.92 8.69 -109.24 6.64 -108.96 4.46 -108.63 1.86 -107.75 -0.52 -107.04 -2.98 -106.67 -4.23 -106.54 -5.54 -106.93 -6.72 -107.99 -9.93 -108 -13.26 -108.33 -16.55 -108.93 -22.5 -109.28 -28.47 -109.23 -34.45 -109.2 -38.71 -109.21 -42.98 -108.71 -47.2 -108.14 -51.99 -108.4 -56.77 -108.4 -61.56 -108.4 -64.06 -108.86 -66.56 -109.1 -69.07 -109.13 -69.33 -109.19 -69.61 -109.15 -69.86 -108.56 -72.98 -109.35 -76.07 -109.29 -79.18 -109.24 -81.34 -109.6 -83.57 -110.18 -85.65 -110.69 -87.49 -110.77 -89.3 -110.84 -91.15 -111.07 -92.37 -110.72 -93.54 -110.46 -94.71 -110.36 -95.42 -109.84 -95.47 -109.3 -95.41 -108.43 -95.31 -107.65 -95.04 -107.24 -94.17 m -94.24 -35.27 b -95.19 -34.22 -96.33 -33.55 -97.33 -32.71 -99.13 -31.2 -100.53 -29.44 -101 -26.98 -101.34 -25.18 -101.4 -23.28 -102.26 -21.59 -103.74 -18.68 -103.74 -18.68 -103.73 -15.48 -103.73 -14.88 -103.71 -14.29 -103.7 -13.69 -103.69 -13.02 -103.61 -12.37 -103.29 -11.76 -102.64 -10.48 -102.48 -9.12 -102.52 -7.7 -102.59 -5.66 -102.19 -3.68 -101.55 -1.68 -99.99 -2.88 -99.68 -4.49 -99.58 -6.16 -99.52 -7.22 -99.51 -8.29 -99.58 -9.35 -99.65 -10.55 -99.24 -11.57 -98.63 -12.54 -97.83 -13.84 -97.03 -15.14 -96.14 -16.37 -94.84 -18.16 -94.08 -20.07 -94.35 -22.31 -94.41 -22.77 -94.39 -23.25 -94.31 -23.71 -93.69 -27.53 -94.19 -31.36 -94.24 -35.27 m -107.09 -72.73 b -107.71 -69.64 -106.64 -66.97 -105.11 -64.42 -104.95 -64.13 -104.69 -63.78 -104.34 -63.94 -103.85 -64.15 -104.03 -64.61 -104.2 -64.95 -105.41 -67.45 -106.15 -70.12 -107.09 -72.73
Dialogue: 0,0:00:00.00,0:00:15.00,Ex-KSY,字幕组署名,0,0,0,,{\an6\1a&HFF&\3c&HFFFFFF&\bord16\pos(1795,748)\fnVDL-GigaMaruJr EB\fs110\fsp4\blur.6}極彩ノ花夢
Dialogue: 3,0:00:00.00,0:00:15.00,Ex-KSY,字幕组署名,0,0,0,,{\an7\p1\1c&HB075A6&\pos(1565,752)\blur.5}m 0 -33 b -18 -33 -33 -18 -33 0 b -33 18 -18 33 0 33 b 18 33 33 18 33 0 b 33 -18 18 -33 0 -33 m 11 20 l 11 -14 l -11 -14 l -11 17 l -3 17 l -3 -7 l 3 -7 l 3 20 l -12 20 b -16 20 -19 17 -19 14 l -19 -12 b -19 -14 -16 -17 -14 -17 l 13 -17 b 15 -17 18 -14 18 -12 l 18 14 b 18 17 15 20 11 20
Dialogue: 3,0:00:00.00,0:00:15.00,Ex-KSY,字幕组署名,0,0,0,,{\an6\1c&H3E4975&\pos(1795,748)\fnVDL-GigaMaruJr EB\fs110\fsp4\blur.35}極彩{\alpha&HFF&}ノ{\alpha}花夢
Dialogue: 0,0:00:00.00,0:00:15.00,Ex-KSY,底色,0,0,0,,{\an8\1a&HFF&\3c&HFFFFFF&\bord12\pos(1600,916)\fnJosefin Sans SemiBold\fs20\blur.6}OTAKU{\fscx200} {\fscx}&{\fscx200} {\fscx}NEKOMUSUME{\fscx200} {\fscx}&{\fscx200} {\fscx}BISHOUJO
Dialogue: 3,0:00:00.00,0:00:15.00,Ex-KSY,彩蛋,0,0,0,,{\an8\1c&H3E4975&\pos(1600,916)\fnJosefin Sans SemiBold\fs20\blur.35}OTAKU{\fscx200} {\fscx}&{\fscx200} {\fscx}NEKOMUSUME{\fscx200} {\fscx}&{\fscx200} {\fscx}BISHOUJO
Dialogue: 4,0:00:00.00,0:00:15.00,Ex-KSY,字幕制作人员,0,0,0,,{\fn方正筑紫明朝宋 简繁\fs28\an8\pos(1600,817)\1c&H000000&\blur.32}{\1c&H3E4975&}时轴：{\1c&HB075A6&}XX{\fscx420} {\fscx}{\1c&H3E4975&}日听：{\1c&HB075A6&}XX{\fscx420} {\fscx}{\1c&H3E4975&}翻译：{\1c&HB075A6&}XX\N{\1c&H3E4975&}校对：{\1c&HB075A6&}XX{\fscx420} {\fscx}{\1c&H3E4975&}美工：{\1c&HB075A6&}XX\N{\1c&H3E4975&}后期：{\1c&HB075A6&}XX{\fscx240} {\fscx}XX
Comment: 0,0:00:00.00,0:00:00.00,Ex-invisible,,0,0,0,,—— EX - 字幕组署名 ——
Comment: 0,0:00:00.00,0:00:00.00,Ex-invisible,,0,0,0,,—— EX - 特殊效果 ——
Dialogue: 0,0:00:00.00,0:00:15.00,Ex-effects,,0,0,0,,{\an7\p1\pos(959,0)\1c&H000000&\3c&HFFFFFF&\bord1\blur4}m 0 0 l 0 1080 l 2 1080 l 2 0
Comment: 0,0:00:00.00,0:00:00.00,Ex-invisible,,0,0,0,,—— EX - 特殊效果 ——
Comment: 0,0:00:00.00,0:00:00.00,Ex-invisible,,0,0,0,,—— SX - effect - 正文修正特效 ——
Comment: 0,0:00:00.00,0:00:00.00,Ex-invisible,角色配置,0,0,0,code once,characters = {["Basic"]="{\\blur2}", ["角色A"]="{\\3c&H7642FA&}", ["Blank"]="{\\3c&H000000&}"}
Comment: 0,0:00:00.00,0:00:00.00,Ex-invisible,Project.Paulownia,0,0,0,code once,--[[by HanaCream]] aegisub = _G.aegisub pairs = _G.pairs ipairs = _G.ipairs type = _G.type tonumber = _G.tonumber tostring = _G.tostring next = _G.next select = _G.select pcall = _G.pcall unpack = _G.unpack os = _G.os require = _G.require re = require("re") string = require("string") table = require("table") util = require("aegisub.util") karaskel = require("karaskel") unicode = require("unicode") json = require("json") ffi = require("ffi") pcall(function() ffi.cdef([[ enum{CP_UTF8 = 65001}; enum{MM_TEXT = 1}; enum{TRANSPARENT = 1}; enum{PT_MOVETO = 0x6,PT_LINETO = 0x2,PT_BEZIERTO = 0x4,PT_CLOSEFIGURE = 0x1}; enum{FW_NORMAL = 400,FW_BOLD = 700}; enum{DEFAULT_CHARSET = 1}; enum{OUT_TT_PRECIS = 4}; enum{CLIP_DEFAULT_PRECIS = 0}; enum{ANTIALIASED_QUALITY = 4}; enum{DEFAULT_PITCH = 0x0}; enum{FF_DONTCARE = 0x0}; ]]) end) ffi.cdef([[ typedef unsigned int UINT; typedef unsigned long DWORD; typedef DWORD* LPDWORD; typedef const char* LPCSTR; typedef const wchar_t* LPCWSTR; typedef wchar_t* LPWSTR; typedef char* LPSTR; typedef void* HANDLE; typedef HANDLE HDC; typedef int BOOL; typedef BOOL* LPBOOL; typedef unsigned int size_t; typedef HANDLE HFONT; typedef HANDLE HGDIOBJ; typedef long LONG; typedef wchar_t WCHAR; typedef unsigned char BYTE; typedef BYTE* LPBYTE; typedef int INT; typedef long LPARAM; typedef struct{LONG cx;LONG cy;}SIZE, *LPSIZE; typedef struct{LONG left;LONG top;LONG right;LONG bottom;}RECT; typedef const RECT* LPCRECT; typedef struct{LONG x;LONG y;}POINT, *LPPOINT; BOOL AbortPath(HDC); BOOL GetTextExtentPoint32W(HDC, LPCWSTR, int, LPSIZE); BOOL BeginPath(HDC); BOOL ExtTextOutW(HDC, int, int, UINT, LPCRECT, LPCWSTR, UINT, const INT*); BOOL EndPath(HDC); BOOL DeleteObject(HGDIOBJ); BOOL DeleteDC(HDC); int MultiByteToWideChar(UINT, DWORD, LPCSTR, int, LPWSTR, int); int SetMapMode(HDC, int); int SetBkMode(HDC, int); int GetPath(HDC, LPPOINT, LPBYTE, int); HDC CreateCompatibleDC(HDC); HFONT CreateFontW(int, int, int, int, int, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, LPCWSTR); HGDIOBJ SelectObject(HDC, HGDIOBJ); size_t wcslen(const wchar_t*); ]]) ksy = { c2c = function(str) --[[HEX颜色代码与ASS颜色代码互转]] local color = "" if re.find(str, "#") ~= nil then match = re.match(str, "#([A-Za-z0-9]{2})([A-Za-z0-9]{2})([A-Za-z0-9]{2})") color = "&H" .. match[4]["str"] .. match[3]["str"] .. match[2]["str"] .. "&" else match = re.match(str, "&H([A-Za-z0-9]{2})([A-Za-z0-9]{2})([A-Za-z0-9]{2})&") color = "#" .. match[4]["str"] .. match[3]["str"] .. match[2]["str"] end return color end, len = function(str) --[[获取字符串长度]] local tmp = str local count = 0 local byteCount = 0 while (string.len(tmp) > 0) do local code = string.byte(tmp) if (code <= 127) then byteCount = byteCount + 1 elseif (code <= 223) then byteCount = byteCount + 2 elseif (code <= 239) then byteCount = byteCount + 3 else byteCount = byteCount + 4 end tmp = string.sub(str, byteCount + 1) count = count + 1 end return count end, sub = function(str, start, length) --[[截取字符串]] if start < 0 then return ksy.sub(str, ksy.len(str) - (-start) + 1, (-start)) end start = start - 1 if (length <= 0) then return "" end local tmp = str local count = 0 local byteCount = 0 local byteSubStart = 1 local byteSubEnd = -1 while (string.len(tmp) > 0) do if (count == start) then byteSubStart = byteCount + 1 elseif (count == start + length) then byteSubEnd = byteCount break end local code = string.byte(tmp) if (code <= 127) then byteCount = byteCount + 1 elseif (code <= 223) then byteCount = byteCount + 2 elseif (code <= 239) then byteCount = byteCount + 3 else byteCount = byteCount + 4 end tmp = string.sub(str, byteCount + 1) count = count + 1 end return string.sub(str, byteSubStart, byteSubEnd) end, rep = function(str, search, replace) --[[替换字符串]] local res = "" for i = 0, ksy.len(str) - 1 do local current = ksy.sub(str, i + 1, 1) if current == search then res = res .. replace else res = res .. current end end return res end, _rotate = function(x, y, z, center_x, center_y, center_z, theta1, theta2, theta3) x, y, z = ksy._rotate_x(x - center_x, y - center_y, z - center_z, theta1) x, y, z = ksy._rotate_y(x, y, z, theta2) x, y, z = ksy._rotate_z(x, y, z, theta3) x, y, z = x + center_x, y + center_y, z + center_z return x, y end, _rotate_x = function(x, y, z, a) local rad = math.rad(a) local cos_a = math.cos(rad) local sin_a = math.sin(rad) local y1 = y * cos_a - z * sin_a local z1 = y * sin_a + z * cos_a return x, y1, z1 end, _rotate_y = function(x, y, z, a) local rad = math.rad(a) local cos_a = math.cos(rad) local sin_a = math.sin(rad) local x1 = x * cos_a + z * sin_a local z1 = -x * sin_a + z * cos_a return x1, y, z1 end, _rotate_z = function(x, y, z, a) local rad = math.rad(a) local cos_a = math.cos(rad) local sin_a = math.sin(rad) local x1 = x * cos_a - y * sin_a local y1 = x * sin_a + y * cos_a return x1, y1, z end, circle = function(r) --[[贝塞尔圆]] local x = r * (2 ^ .5 - 1) * 4 / 3 local c = string.format( "m 0 -%s b -%s -%s -%s -%s -%s 0 b -%s %s -%s %s 0 %s b %s %s %s %s %s 0 b %s -%s %s -%s 0 -%s ", r, x, r, r, x, r, r, x, x, r, r, x, r, r, x, r, r, x, x, r, r) return c end, star = function(angles, majorAxis, minorAxis, frz) --[[等边半正凹多边形]] if frz == nil then frz = 0 end local points = {} local angle = math.pi / angles for i = 0, angles * 2 - 1 do local r = (i % 2 == 0) and majorAxis or minorAxis local theta = i * angle local x = r * math.cos(theta) local y = r * math.sin(theta) ksy.table(points).add(string.format("%.2f %.2f", x, y)) end draw = "m " .. ksy.table(points).join(" l ") draw = ksy.rotate(draw, 0, 0, 0, 0, frz - 90) return draw end, deg = function(x1, y1, x2, y2) --[[相对角度]] local dx = x2 - x1 local dy = y2 - y1 local angle = math.atan2(dy, dx) return math.deg(angle) end, debug = function(e) if type(e) == "table" then e = json.encode(e) elseif e == nil then e = "nil" elseif e == true then e = "true" elseif e == false then e = "false" end aegisub.debug.out(2, e .. "\n") end, copy = function(tbl, depth) --[[深拷贝]] if type(tbl) ~= "table" then return tbl end if depth ~= nil and depth <= 0 then return tbl end local new_tbl = {} for k, v in pairs(tbl) do if type(v) == "table" then new_tbl[k] = ksy.copy(v, depth and (depth - 1) or nil) else new_tbl[k] = v end end return new_tbl end, round = function(value, precision) value = tonumber(value) or 0 return precision and math.floor(value * 10 ^ precision + .5) / 10 ^ precision or math.floor(value + .5) end, utf8_to_utf16 = function(str) local wlen = ffi.C.MultiByteToWideChar(ffi.C.CP_UTF8, 0x0, str, -1, nil, 0) local ws = ffi.new("wchar_t[?]", wlen) ffi.C.MultiByteToWideChar(ffi.C.CP_UTF8, 0x0, str, -1, ws, wlen) return ws end, str = function(str, styleref) styleref = styleref ~= nil and styleref or line.styleref return { info = function() --[[获取指定字符串的几何属性]] local width, height, descent, extlead = aegisub.text_extents(styleref, str) return { width = width, height = height, descent = descent, extlead = extlead } end, getw = function() --[[获取指定字符串的宽度]] return ksy.str(str, styleref).info().width end, geth = function() --[[获取指定字符串的高度]] return ksy.str(str, styleref).info().height end, toshape = function(font_precision, fp_precision) --[[文字转绘图, 主要代码来自Yutils]] font_precision = font_precision ~= nil and font_precision or 64 fp_precision = fp_precision ~= nil and fp_precision or 2 local resources_deleter local dc = ffi.gc(ffi.C.CreateCompatibleDC(nil), function() resources_deleter() end) ffi.C.SetMapMode(dc, ffi.C.MM_TEXT) ffi.C.SetBkMode(dc, ffi.C.TRANSPARENT) local font = ffi.C.CreateFontW( styleref.fontsize * font_precision, 0, 0, 0, styleref.bold and ffi.C.FW_BOLD or ffi.C.FW_NORMAL, styleref.italic and 1 or 0, styleref.underline and 1 or 0, styleref.strikeout and 1 or 0, ffi.C.DEFAULT_CHARSET, ffi.C.OUT_TT_PRECIS, ffi.C.CLIP_DEFAULT_PRECIS, ffi.C.ANTIALIASED_QUALITY, ffi.C.DEFAULT_PITCH + ffi.C.FF_DONTCARE, ksy.utf8_to_utf16(styleref.fontname) ) local old_font = ffi.C.SelectObject(dc, font) resources_deleter = function() ffi.C.SelectObject(dc, old_font) ffi.C.DeleteObject(font) ffi.C.DeleteDC(dc) end local shape, shape_n = {}, 0 text = ksy.utf8_to_utf16(str) local text_len = tonumber(ffi.C.wcslen(text)) local char_widths if styleref.spacing ~= 0 then char_widths = ffi.new("INT[?]", text_len) local size, space = ffi.new("SIZE[1]"), styleref.spacing * font_precision for i = 0, text_len - 1 do ffi.C.GetTextExtentPoint32W(dc, text + i, 1, size) char_widths[i] = size[0].cx + space end end ffi.C.BeginPath(dc) ffi.C.ExtTextOutW(dc, 0, 0, 0x0, nil, text, text_len, char_widths) ffi.C.EndPath(dc) local points_n = ffi.C.GetPath(dc, nil, nil, 0) if points_n > 0 then local points, types = ffi.new("POINT[?]", points_n), ffi.new("BYTE[?]", points_n) ffi.C.GetPath(dc, points, types, points_n) local i = 0 local cur_type, cur_point while i < points_n do cur_type, cur_point = types[i], points[i] if cur_type == ffi.C.PT_MOVETO then shape_n = shape_n + 1 shape[shape_n] = "m" shape[shape_n + 1] = ksy.round(cur_point.x / font_precision * styleref.scale_x * .01, fp_precision) shape[shape_n + 2] = ksy.round(cur_point.y / font_precision * styleref.scale_y * .01, fp_precision) shape_n = shape_n + 2 i = i + 1 elseif cur_type == ffi.C.PT_LINETO or cur_type == (ffi.C.PT_LINETO + ffi.C.PT_CLOSEFIGURE) then shape_n = shape_n + 1 shape[shape_n] = "l" shape[shape_n + 1] = ksy.round(cur_point.x / font_precision * styleref.scale_x * .01, fp_precision) shape[shape_n + 2] = ksy.round(cur_point.y / font_precision * styleref.scale_y * .01, fp_precision) shape_n = shape_n + 2 i = i + 1 elseif cur_type == ffi.C.PT_BEZIERTO or cur_type == (ffi.C.PT_BEZIERTO + ffi.C.PT_CLOSEFIGURE) then shape_n = shape_n + 1 shape[shape_n] = "b" shape[shape_n + 1] = ksy.round(cur_point.x / font_precision * styleref.scale_x * .01, fp_precision) shape[shape_n + 2] = ksy.round(cur_point.y / font_precision * styleref.scale_y * .01, fp_precision) shape[shape_n + 3] = ksy.round(points[i + 1].x / font_precision * styleref.scale_x * .01, fp_precision) shape[shape_n + 4] = ksy.round(points[i + 1].y / font_precision * styleref.scale_y * .01, fp_precision) shape[shape_n + 5] = ksy.round(points[i + 2].x / font_precision * styleref.scale_x * .01, fp_precision) shape[shape_n + 6] = ksy.round(points[i + 2].y / font_precision * styleref.scale_y * .01, fp_precision) shape_n = shape_n + 6 i = i + 3 else i = i + 1 end end end ffi.C.AbortPath(dc) return ksy.shape(ksy.table(shape).join(" ")) end } end, table = function(tbl) return { contains = function(value, ...) --[[判断是否包含指定值]] if value == nil then return true end local lookup = {} for _, v in ipairs(tbl) do lookup[v] = true end for i = 1, select("#", value, ...) do local _value = select(i, value, ...) if not lookup[_value] then return false end end return true end, containsKey = function(key, ...) --[[判断是否包含指定键]] if key == nil then return true end for i = 1, select("#", key, ...) do local _key = select(i, key, ...) if tbl[_key] == nil then return false end end return true end, join = function(separator) --[[转字符串]] return table.concat(tbl, separator) end, dedup = function() --[[去重]] local seen = {} local removeindices = {} for i, value in ipairs(tbl) do if seen[value] then ksy.table(removeindices).add(i) else seen[value] = true end end return ksy.table(tbl).removeAt(unpack(removeindices)) end, remove = function(value, ...) --[[移除指定值]] for i = #tbl, 1, -1 do for _i = 1, select("#", value, ...) do local _value = select(_i, value, ...) if tbl[i] == _value then table.remove(tbl, i) end end end return ksy.table(tbl) end, removeAt = function(index, ...) --[[移除指定索引]] local indices = { index, ... } table.sort(indices, function(a, b) return a > b end) local _prev for _, _index in ipairs(indices) do if _index ~= _prev then table.remove(tbl, _index) end _prev = _index end return ksy.table(tbl) end, removeKey = function(key, ...) --[[移除指定键]] for i = 1, select("#", key, ...) do local _key = select(i, key, ...) tbl[_key] = nil end return ksy.table(tbl) end, removeValue = function(value, ...) --[[移除指定值]] for k, v in pairs(tbl) do for i = 1, select("#", value, ...) do local _value = select(i, value, ...) if v == _value then tbl[k] = nil end end end return ksy.table(tbl) end, add = function(value, ...) --[[添加指定值]] for i = 1, select("#", value, ...) do local _value = select(i, value, ...) table.insert(tbl, _value) end return ksy.table(tbl) end, insert = function(index, value, ...) --[[添加指定值]] for i = select("#", value, ...), 1, -1 do local _value = select(i, value, ...) table.insert(tbl, index, _value) end return ksy.table(tbl) end, plus = function(value, ...) --[[拼接]] for i = select("#", value, ...), 1, -1 do local _value = select(i, value, ...) table.move(_value, 1, #_value, #tbl + 1, tbl) end return ksy.table(tbl) end, reverse = function() --[[反转]] local reversed = {} for i = #tbl, 1, -1 do table.insert(reversed, tbl[i]) end return ksy.table(reversed) end, copy = function(depth) --[[深拷贝]] return ksy.table(ksy.copy(tbl, depth)) end, value = tbl, } end, func = function(func) return { parse = function() if _G.rawget(_G, "ASSCommandCompile") == nil then ASSCommandCompile = re.compile("\\\\([^(]+)\\(([^)]*)\\)") end local match = ASSCommandCompile:match(func) return { func = match[2]["str"], args = re.split(match[3]["str"], ",") } end, partial = function(param, ...) local fixedparams = { param, ... } return function(...) func(unpack(fixedparams), ...) end end, run = function() local value = func() if value ~= nil then return value end return "" end, } end, clock = function(start_time, end_time) if start_time == nil then start_time = os.clock() end return { fin = function() end_time = os.clock() return ksy.clock(start_time, end_time) end, dur = function() return end_time - start_time end, } end, shape = function(shape) local points, commands = {}, {} if type(shape) == "table" then points = ksy.copy(shape.points) commands = ksy.copy(shape.commands) else local tokens = {} for token in string.gmatch(shape, "%S+") do ksy.table(tokens).add(token) if tonumber(token) then if points[#points] == nil or points[#points].y ~= nil then ksy.table(points).add({ x = tonumber(token) }) else points[#points].y = tonumber(token) end if #points > #commands then ksy.table(commands).add(commands[#commands]) end else ksy.table(commands).add(token) end end end local _out = function(move, precision) local _commands, _points = ksy.copy(move.commands), ksy.copy(move.points) local _shape = {} for i = 1, #_commands do if _commands[i] == nil then goto continue elseif _commands[i] == "b" then _commands[i + 1] = nil _commands[i + 2] = nil ksy.table(_shape).add(_commands[i]) else ksy.table(_shape).add(_commands[i]) end ::continue:: local x, y = _points[i].x, _points[i].y if precision then x = ksy.round(x, precision) y = ksy.round(y, precision) end ksy.table(_shape).add(tostring(x)) ksy.table(_shape).add(tostring(y)) _commands[i] = nil end return ksy.table(_shape).join(" ") end local _out1 = function(precision) return _out({ commands = commands, points = points }, precision) end local moves = {} local _out2 = function(precision) local _shapes = {} for _, move in ipairs(moves) do ksy.table(_shapes).add(_out(move, precision)) end return _shapes end local function _calc_windings(vertex, move, precision) --[[计算环绕数]] local _vertex, _commands, _points = ksy.copy(vertex), ksy.copy(move.commands), ksy.copy(move.points) local x, y = _vertex.x, _vertex.y local windings = 0 local xmin, xmax, ymin, ymax = _points[1].x, _points[1].x, _points[1].y, _points[1].y for i = 2, #_points do local _x, _y = _points[i].x, _points[i].y if _x > xmax then xmax = _x elseif _x < xmin then xmin = _x end if _y > ymax then ymax = _y elseif _y < ymin then ymin = _y end end if x < xmin or x > xmax or y > ymax then return windings end for i = 1, #_commands do if i == 1 then goto continue end if _commands[i] == nil then goto continue elseif _commands[i] == "b" then _commands[i + 1] = nil _commands[i + 2] = nil if x < math.min(_points[i - 1].x, _points[i].x, _points[i + 1].x, _points[i + 2].x) or x > math.max(_points[i - 1].x, _points[i].x, _points[i + 1].x, _points[i + 2].x) then goto continue end local _bezier = ksy.shape(("m %s %s b %s %s %s %s %s %s"):format(_points[i - 1].x, _points[i - 1].y, _points[i].x, _points[i].y, _points[i + 1].x, _points[i + 1].y, _points[i + 2].x, _points[i + 2] .y)) local __commands = {} local __points = {} ksy.table(__commands).add("m") ksy.table(__points).add({ x = _points[i - 1].x, y = _points[i - 1].y }) for _t = 1, precision do local _x, _y = _bezier.bezier(_t / precision) ksy.table(__commands).add("l") ksy.table(__points).add({ x = _x, y = _y }) end windings = windings + _calc_windings(_vertex, { commands = __commands, points = __points }, precision) else local x1, y1 = _points[i - 1].x, _points[i - 1].y local x2, y2 = _points[i].x, _points[i].y if x < math.min(x1, x2) or x > math.max(x1, x2) then goto continue end local y0 = y1 + (y2 - y1) * (x - x1) / (x2 - x1) if y0 >= y then if x == math.min(x1, x2) then windings = windings + (x2 > x1 and 1 or -1) elseif x == math.max(x1, x2) then windings = windings + 0 else windings = windings + (x2 > x1 and 1 or -1) end end end ::continue:: _commands[i] = nil end return windings end local function _separate_moves() --[[分离绘图]] for i, command in ipairs(commands) do if command == "m" then ksy.table(moves).add({ commands = {}, points = {} }) end ksy.table(moves[#moves].commands).add(command) ksy.table(moves[#moves].points).add(ksy.copy(points[i])) end for _, move in ipairs(moves) do if move.points[#move.points].x ~= move.points[1].x or move.points[#move.points].y ~= move.points[1].y then ksy.table(move.commands).add("l") ksy.table(move.points).add(ksy.copy(move.points[1])) end end end local function _separate_domains(precision) --[[分离连通域]] local _intersects = {} for i, move in ipairs(moves) do _intersects[i] = {} local _vertex = move.points[1] for _i, _move in ipairs(moves) do if i == _i then goto continue end if _calc_windings(_vertex, _move, precision) ~= 0 then ksy.table(_intersects[i]).add(_i) end ::continue:: end end local removeindices = {} for i, move in ipairs(moves) do if #_intersects[i] % 2 == 0 then goto continue end for _, index in ipairs(_intersects[i]) do if #_intersects[index] == #_intersects[i] - 1 and ksy.table(_intersects[index]).contains(unpack(ksy.table(_intersects[i]).copy().remove(index).value)) then ksy.table(moves[index].commands).add(unpack(move.commands)) ksy.table(moves[index].points).add(unpack(move.points)) ksy.table(removeindices).add(i) break end end ::continue:: end ksy.table(moves).removeAt(unpack(removeindices)) end return { bezier = function(t) --[[计算贝塞尔曲线在参数t处的值]] local x1, y1 = points[1].x, points[1].y local x2, y2 = points[2].x, points[2].y local x3, y3 = points[3].x, points[3].y local x4, y4 = points[4].x, points[4].y local u = 1 - t local uu = u * u local uuu = uu * u local tt = t * t local ttt = tt * t local pX = uuu * x1 + 3 * uu * t * x2 + 3 * u * tt * x3 + ttt * x4 local pY = uuu * y1 + 3 * uu * t * y2 + 3 * u * tt * y3 + ttt * y4 return pX, pY end, is_intersect = function(x, y, precision) --[[是否相交]] precision = precision ~= nil and precision or 50 return _calc_windings({ x = x, y = y }, { commands = commands, points = points }, precision) == 0 end, filter = function(filter) --[[对图形进行自定义处理]] for i, point in ipairs(points) do local x, y = filter(point.x, point.y) points[i] = { x = x, y = y } end return ksy.shape({ commands = commands, points = points }) end, move = function(x, y) --[[平移]] return ksy.shape({ commands = commands, points = points }).filter(function(_x, _y) return _x + x, _y + y end) end, reset = function(an) --[[平移至坐标原点]] if an == nil then an = 5 end local xmin, xmax, ymin, ymax = points[1].x, points[1].x, points[1].y, points[1].y for i = 2, #points do local _x, _y = points[i].x, points[i].y if _x > xmax then xmax = _x elseif _x < xmin then xmin = _x end if _y > ymax then ymax = _y elseif _y < ymin then ymin = _y end end local middle, center = (ymax + ymin) / 2, (xmax + xmin) / 2 local x, y if ksy.table({ 1, 4, 7 }).contains(an) then x = xmin elseif ksy.table({ 2, 5, 8 }).contains(an) then x = center elseif ksy.table({ 3, 6, 9 }).contains(an) then x = xmax end if ksy.table({ 1, 2, 3 }).contains(an) then y = ymax elseif ksy.table({ 4, 5, 6 }).contains(an) then y = middle elseif ksy.table({ 7, 8, 9 }).contains(an) then y = ymin end return ksy.shape({ commands = commands, points = points }).filter(function(_x, _y) return _x - x, _y - y end) end, reverse = function() --[[反向]] commands = ksy.table(commands).removeAt(1).reverse().insert(1, "m").value points = ksy.table(points).reverse().value return ksy.shape({ commands = commands, points = points }) end, rotate = function(center_x, center_y, theta1, theta2, theta3) --[[旋转绘图]] return ksy.shape(shape).filter(function(x, y) return ksy._rotate(x, y, 0, center_x, center_y, 0, theta1, theta2, theta3) end) end, split = function(precision) --[[拆分连通域]] precision = precision ~= nil and precision or 10 _separate_moves() _separate_domains(precision) return { out = _out2 } end, toline = function() commands = ksy.table(commands).copy().removeAt(1).reverse().insert(1, "m").plus(commands).value points = ksy.table(points).copy().reverse().plus(points).value return ksy.shape({ commands = commands, points = points }) end, out = _out1, } end, } --[[極彩花夢 - 正文字幕样式配置自动化]] --[[———————————————————————————————]] --[[为不同角色配置不同的效果]] --[[修正标点符号显示效果，为句首、句尾含有标点符号的行调整重心]] --[[将开始时间、结束时间设为最近的帧]] --[[添加\furi(num,text,fsc,fsp)]] --[[检查字幕是否超出画布或接近边缘]] --[[检查字幕持续时间是否过短]] --[[检查字幕开始时间、结束时间周围是否有关键帧]] --[[检查字幕是否闪轴]] --[[为特殊对话框样式进行适配]] function ksy_shuusei() if meta["language"] == "ENG" then if line.styleref.name == "Sx-jp" then return "" end local res = characters["Basic"] res = res .. ksy_character() res = res .. orgline.text ksy_layer() ksy_time() return res end line.text = orgline.text if type(ksy_fix) == "function" then ksy_fix() end ksy_style() local res = ksy_effect(true) res = res .. characters["Basic"] res = res .. ksy_character() res = res .. ksy_content() ksy_layer() ksy_margin() ksy_time() res = ksy_relocate(res) ksy_check() return res end function ksy_menu() local function _generate_dropdown(menu, name, label, items, description) menu[#menu + 1] = { class = "label", x = 0, y = menu[#menu].y + menu[#menu].height + 1, width = 4, height = 1, label = label .. "：" } menu[#menu + 1] = { name = name, class = "dropdown", x = 5, y = menu[#menu].y, width = 4, height = 1, items = items, value = items[1] } menu[#menu + 1] = { class = "label", x = 0, y = menu[#menu].y + 1, width = 9, height = select(2, description:gsub("\n", "")) + 1, label = description } end local menu = { { class = "label", x = 2, y = 0, width = 5, height = 1, label = "極彩花夢 - 正文字幕样式配置自动化v241001" } } local function _add(_list, _elements) for _, _value in ipairs(_elements) do if _value ~= _list[1] then table.insert(_list, _value) end end return _list end local _lang = {} if meta["language"] ~= nil and meta["language"] == "JPN" then table.insert(_lang, "日语字幕") end _lang = _add(_lang, { "中日双语", "日语字幕" }) local _styles = {} table.insert(_styles, " ") _styles = _add(_styles, { "kawaii", "sans", "serif" }) _generate_dropdown(menu, "lang", "选择字幕配置", _lang, "将双语字幕按照预设转变为日语字幕。\n如果字幕贴近边缘、超出画布会进行提示。") _generate_dropdown(menu, "style", "应用样式", _styles, "忽略默认配置强制应用预设的字幕样式，如果与默认配置相同则此选项不会生效。\n仅用于调试，部分标签会表达出错误的效果。") _generate_dropdown(menu, "check_duration", "字幕持续时间检测阈值", { "10帧", "15帧", "12帧" }, "如果持续时间低于设定帧数会提示。") _generate_dropdown(menu, "check_start_frame", "字幕开始时间关键帧检测阈值", { "3帧", "5帧", "7帧" }, "如果开始时间离最近的关键帧的差值小于设定帧数会提示。") _generate_dropdown(menu, "check_end_frame", "字幕结束时间关键帧检测阈值", { "4帧", "8帧", "12帧" }, "如果结束时间离最近的关键帧的差值小于设定帧数会提示。") _generate_dropdown(menu, "check_time_interval", "字幕闪轴检测阈值", { "6帧", "10帧", "15帧" }, "如果开始时间与前一行字幕的结束时间差值小于设定帧数会提示。") menu[#menu + 1] = { name = "change_characters", class = "checkbox", x = 0, y = menu[#menu].y + menu[#menu].height + 1, width = 1, height = 1, label = "修改效果表", value = false } menu[#menu + 1] = { class = "label", x = 0, y = menu[#menu].y + menu[#menu].height, width = 1, height = 1, label = "基础效果：" } menu[#menu + 1] = { name = "characters_Basic", class = "edit", x = 1, y = menu[#menu].y, width = 2, height = 1, text = re.match(characters["Basic"], "\\{(.+)\\}")[2]["str"] } menu[#menu + 1] = { class = "label", x = 3, y = menu[#menu].y, width = 1, height = 1, label = "空白效果：" } menu[#menu + 1] = { name = "characters_Blank", class = "color", x = 4, y = menu[#menu].y, width = 2, height = 1, value = ksy.c2c(re.match(characters["Blank"], "\\\\3c(&H[0-9A-F]{6}&)")[2]["str"]) } for _character, _effect in pairs(characters) do if _character ~= "Basic" and _character ~= "Blank" then menu[#menu + 1] = { class = "label", x = menu[#menu - 1].x + 3 > 6 and 0 or menu[#menu - 1].x + 3, y = menu[#menu].y + (menu[#menu - 1].x + 3 > 6 and 1 or 0), width = 1, height = 1, label = _character .. "：" } menu[#menu + 1] = { name = "characters_" .. _character, class = "color", x = menu[#menu].x + 1, y = menu[#menu].y, width = 2, height = 1, value = ksy.c2c(re.match(_effect, "\\\\3c(&H[0-9A-F]{6}&)")[2]["str"]) } end end local space = string.rep("\xE3\x80\x80", 9) local button, _config = aegisub.dialog.display( menu, { space .. "应用" .. space, space .. "取消" .. space } ) if button == space .. "取消" .. space then aegisub.cancel() end local function _generate_style(str) local _styleref = { ["name"] = "Sx-jp", ["fontname"] = "", ["fontsize"] = 0, ["color1"] = "&H00FFFFFF&", ["color2"] = "&HFFFFFFFF&", ["color3"] = "&H00000000&", ["color4"] = "&H00000000&", ["bold"] = false, ["italic"] = false, ["underline"] = false, ["strikeout"] = false, ["scale_x"] = 100, ["scale_y"] = 100, ["spacing"] = 0, ["angle"] = 0, ["borderstyle"] = 1, ["outline"] = 0, ["shadow"] = 0, ["align"] = 2, ["margin_l"] = 0, ["margin_r"] = 0, ["margin_v"] = 0, ["margin_t"] = 0, ["margin_b"] = 0, ["encoding"] = 1, ["class"] = "style", ["raw"] = str, ["section"] = "[V4+ Styles]", ["relative_to"] = 2, } local _asstag = { ["name"] = false, ["fontname"] = "fn", ["fontsize"] = "fs", ["color1"] = "1c", ["color2"] = "2c", ["color3"] = "3c", ["color4"] = "4c", ["bold"] = "b", ["italic"] = "i", ["underline"] = "u", ["strikeout"] = "s", ["scale_x"] = "fscx", ["scale_y"] = "fscy", ["spacing"] = "fsp", ["angle"] = "frz", ["borderstyle"] = false, ["outline"] = "bord", ["shadow"] = "shad", ["align"] = "an", ["margin_l"] = function(_value) line.margin_l = _value + line.margin_l end, ["margin_r"] = function(_value) line.margin_r = _value + line.margin_r end, ["margin_v"] = function(_value) line.margin_v = _value + line.margin_v line.margin_t = line.margin_v line.margin_b = line.margin_v end, ["margin_t"] = false, ["margin_b"] = false, ["encoding"] = "fe", } match = re.match(str, "^Style: ?([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+)$") table.remove(match, 1) local _keys = { "name", "fontname", "fontsize", "color1", "color2", "color3", "color4", "bold", "italic", "underline", "strikeout", "scale_x", "scale_y", "spacing", "angle", "borderstyle", "outline", "shadow", "align", "margin_l", "margin_r", "margin_v", "encoding" } local _effect = "{" local _margin = {} for _index in pairs(_keys) do if type(_styleref[_keys[_index]]) == "string" then _styleref[_keys[_index]] = match[_index]["str"] elseif type(_styleref[_keys[_index]]) == "boolean" then _styleref[_keys[_index]] = match[_index]["str"] == "1" elseif type(_styleref[_keys[_index]]) == "number" then if _keys[_index] == "margin_v" then _styleref["margin_t"] = tonumber(match[_index]["str"]) _styleref["margin_b"] = tonumber(match[_index]["str"]) end _styleref[_keys[_index]] = tonumber(match[_index]["str"]) end if _asstag[_keys[_index]] == false then goto continue elseif type(_asstag[_keys[_index]]) == "string" then _effect = _effect .. "\\" .. _asstag[_keys[_index]] .. ((_index >= 4 and _index <= 7) and util.color_from_style(match[_index]["str"]) or match[_index]["str"]) elseif type(_asstag[_keys[_index]]) == "function" then _margin[#_margin + 1] = { _asstag[_keys[_index]], tonumber(match[_index]["str"]) } end ::continue:: end _effect = _effect .. "}" return _styleref, _effect, _margin end local _generated_style_jp = { {}, "", {} } local _generated_style_zh = { {}, "", {} } config = { ["JPN_only"] = _config["lang"] ~= "中日双语", ["style_force"] = _config["style"] ~= " ", ["style"] = "", ["styleref"] = { ["Sx-jp"] = {}, ["Sx-zh"] = {}, }, ["stylerefs"] = { ["kawaii"] = { ["Sx-jp"] = _generate_style( "Style: Sx-jp,A-OTF Shin Maru Go Pr6N DB,64,&H00FFFFFF,&HFFFFFFFF,&H00000000,&H64000000,0,0,0,0,99,100,0.5,0,1,2.42,0,2,0,0,15,128"), ["Sx-zh"] = _generate_style( "Style: Sx-zh,方正兰亭圆_GBK_中,62,&H00FFFFFF,&HFFFFFFFF,&H00000000,&H64000000,0,0,0,0,100,100,0,0,1,2.42,0,2,0,0,65,1"), }, ["sans"] = { ["Sx-jp"] = _generate_style( "Style: Sx-jp,Noto Sans JP Medium,64,&H00FFFFFF,&HFFFFFFFF,&H00000000,&H00000000,0,0,0,0,99,100,0.5,0,1,2.42,0,2,0,0,15,128"), ["Sx-zh"] = _generate_style( "Style: Sx-zh,Noto Sans SC Medium,78,&H00FFFFFF,&HFFFFFFFF,&H00000000,&H64000000,0,0,0,0,99,100,0.5,0,1,2.42,0,2,0,0,65,1"), }, ["serif"] = { ["Sx-jp"] = _generate_style( "Style: Sx-jp,A-OTF Ryumin Pr6N H-KL,60,&H00FFFFFF,&HFFFFFFFF,&H00000000,&H64000000,0,0,0,0,99,100,1,0,1,2.42,0,2,0,0,15,128"), ["Sx-zh"] = _generate_style( "Style: Sx-zh,方正中粗雅宋_GBK,66,&H00FFFFFF,&HFFFFFFFF,&H00000000,&H64000000,0,0,0,0,95,100,2,0,1,2.42,0,2,0,0,65,1"), }, }, ["effect"] = { ["Sx-jp"] = _generated_style_jp[2], ["Sx-zh"] = _generated_style_zh[2], }, ["margin"] = { ["Sx-jp"] = _generated_style_jp[3], ["Sx-zh"] = _generated_style_zh[3], }, ["check_duration"] = tonumber(re.match(_config["check_duration"], "(\\d+)")[1]["str"]), ["check_start_frame"] = tonumber(re.match(_config["check_start_frame"], "(\\d+)")[1]["str"]), ["check_end_frame"] = tonumber(re.match(_config["check_end_frame"], "(\\d+)")[1]["str"]), ["check_time_interval"] = tonumber(re.match(_config["check_time_interval"], "(\\d+)")[1]["str"]), } if _config["change_characters"] == true then for key, value in pairs(_config) do if re.find(key, "^characters_") ~= nil then local _character = re.match(key, "^characters_(.+)$")[2]["str"] if _character == "Basic" then characters["Basic"] = re.sub(characters["Basic"], "\\{(.+)\\}", "{" .. re.sub(value, "\\\\", "\\\\\\\\") .. "}") else characters[_character] = re.sub(characters[_character], "\\\\3c(&H[0-9A-F]{6}&)", "\\\\3c" .. ksy.c2c(value)) end end end end end ksy_menu() keyframes = {} for _, v in pairs(aegisub.keyframes()) do keyframes[v] = true end prev_end_frame = 0 ksy_pandora = { ["A-OTF Shin Maru Go Pr6N DB"] = { ["style"] = "kawaii", ["margin_t"] = 8, ["contentrep"] = { ["？"] = "？", ["！"] = "！", ["…"] = "…", ["「"] = "「", [" "] = "{\\fscx200} {\\fscx}", ["」"] = "」", ["・"] = "・", ["♥"] = "{\\p1\\pbo-12}m 39.8 26.4 b 38.7 25.2 37.6 24 36.8 23 b 35.9 21.9 35.2 20.7 34.7 19.5 b 34.5 19 34.3 18.3 34.3 17.6 b 34.3 16.9 34.5 16.2 34.8 15.6 b 35.2 15 35.8 14.5 36.8 14.3 b 37.7 14 38.6 14 39.3 14.4 b 40 14.8 40.6 15.4 40.8 16.2 b 41.4 15.4 42.1 14.8 43 14.4 b 43.8 14 44.7 14 45.6 14.3 b 46.4 14.5 47 15 47.3 15.6 b 47.6 16.2 47.7 16.9 47.7 17.6 b 47.6 18.3 47.3 19 47 19.5 b 46.1 20.7 45 21.9 43.9 23 b 42.8 24 41.4 25.2 39.8 26.4 l 39.8 26.4 m 16 50.3 b 13.3 47.5 11 44.9 9.1 42.5 b 7.2 40.1 5.6 37.5 4.3 34.8 b 4 33.9 3.7 32.8 3.6 31.7 b 3.6 30.5 3.7 29.3 4 28.2 b 4.3 27 4.9 26 5.8 25.1 b 6.7 24.1 7.9 23.4 9.5 22.9 b 11.6 22.2 13.5 22.3 15.2 23.2 b 16.8 24.1 18 25.4 18.8 27.2 b 19.6 26 20.5 25 21.7 24.2 b 22.8 23.4 24 22.9 25.3 22.6 b 26.6 22.3 27.9 22.4 29.3 22.9 b 30.7 23.4 31.7 24.1 32.4 25.1 b 33.1 26 33.6 27 33.7 28.2 b 33.9 29.3 33.8 30.5 33.5 31.7 b 33.2 32.8 32.7 33.9 32.1 34.8 b 30.1 37.5 27.8 40.1 25.2 42.5 b 22.6 44.9 19.6 47.5 16 50.3 l 16 50.3{\\p0}", }, ["relocate"] = { }, ["furigana"] = { ["content"] = "{\\an%s\\fs%s\\fscx%s\\fscy%s\\fsp%s\\pos(%s,%s)}%s", ["Yoffset"] = 8, ["Yoffset2"] = -8, ["Yoffset3"] = -6, ["fscx"] = 84, ["fscy"] = 82, }, ["JPN_only"] = { ["fs"] = 78, ["Yoffset"] = 8, ["Yoffset2"] = 6, }, }, ["方正兰亭圆_GBK_中"] = { ["style"] = "kawaii", ["margin_t"] = 64, ["contentrep"] = { ["？"] = "{\\alpha&HFF&}喵{\\alpha}", ["！"] = "{\\fscx50} {\\fscx110}!{\\fscx150} {\\fscx0}!{\\fscx}", ["…"] = "{\\alpha&HFF&\\fscx90}喵{\\alpha\\fscx}", ["「"] = "「", [" "] = "{\\fscx180} {\\fscx}", ["」"] = "」", ["・"] = "{\\alpha&HFF&}喵{\\alpha}", ["♥"] = "{\\p1\\pbo-15}m 39.8 26.4 b 38.7 25.2 37.6 24 36.8 23 b 35.9 21.9 35.2 20.7 34.7 19.5 b 34.5 19 34.3 18.3 34.3 17.6 b 34.3 16.9 34.5 16.2 34.8 15.6 b 35.2 15 35.8 14.5 36.8 14.3 b 37.7 14 38.6 14 39.3 14.4 b 40 14.8 40.6 15.4 40.8 16.2 b 41.4 15.4 42.1 14.8 43 14.4 b 43.8 14 44.7 14 45.6 14.3 b 46.4 14.5 47 15 47.3 15.6 b 47.6 16.2 47.7 16.9 47.7 17.6 b 47.6 18.3 47.3 19 47 19.5 b 46.1 20.7 45 21.9 43.9 23 b 42.8 24 41.4 25.2 39.8 26.4 l 39.8 26.4 m 16 50.3 b 13.3 47.5 11 44.9 9.1 42.5 b 7.2 40.1 5.6 37.5 4.3 34.8 b 4 33.9 3.7 32.8 3.6 31.7 b 3.6 30.5 3.7 29.3 4 28.2 b 4.3 27 4.9 26 5.8 25.1 b 6.7 24.1 7.9 23.4 9.5 22.9 b 11.6 22.2 13.5 22.3 15.2 23.2 b 16.8 24.1 18 25.4 18.8 27.2 b 19.6 26 20.5 25 21.7 24.2 b 22.8 23.4 24 22.9 25.3 22.6 b 26.6 22.3 27.9 22.4 29.3 22.9 b 30.7 23.4 31.7 24.1 32.4 25.1 b 33.1 26 33.6 27 33.7 28.2 b 33.9 29.3 33.8 30.5 33.5 31.7 b 33.2 32.8 32.7 33.9 32.1 34.8 b 30.1 37.5 27.8 40.1 25.2 42.5 b 22.6 44.9 19.6 47.5 16 50.3 l 16 50.3{\\p0}", --[[得意黑/60]] }, ["relocate"] = { ["？"] = { ["content"] = "{\\an4\\fnA-OTF Shin Maru Go Pr6N DB\\fscx116\\fscy128\\pos(%s,%s)}？", ["Xoffset"] = -3, ["Yoffset"] = -2, ["Yoffset2"] = -2, }, ["…"] = { ["content"] = "{\\an4\\fnA-OTF Shin Maru Go Pr6N DB\\fscx78\\fscy78\\pos(%s,%s)\\fsp-22}・・・", ["Xoffset"] = -8, ["Yoffset"] = 0, ["Yoffset2"] = 0, }, ["・"] = { ["content"] = "{\\an5\\fnA-OTF Shin Maru Go Pr6N DB\\fscx116\\fscy116\\pos(%s,%s)}・", ["Xoffset"] = 0, ["Yoffset"] = 0, ["Yoffset2"] = 0, }, }, ["furigana"] = { ["content"] = "{\\an%s\\fs%s\\fscx%s\\fscy%s\\fsp%s\\pos(%s,%s)}%s", ["Yoffset"] = 6, ["Yoffset2"] = -10, ["Yoffset3"] = -8, ["fscx"] = 82, ["fscy"] = 80, }, }, ["Noto Sans JP Medium"] = { ["style"] = "sans", ["margin_t"] = 4, ["contentrep"] = { ["？"] = "{\\fscx20} {\\fscx}?{\\fscx80} {\\fscx0}?{\\fscx}", ["！"] = "{\\fscx30} {\\fscx}!{\\fscx70} {\\fscx0}!{\\fscx}", ["…"] = "…", ["「"] = "「", [" "] = "{\\fscx200} {\\fscx}", ["」"] = "」", ["・"] = "・", ["♥"] = "{\\p1\\pbo-2}m 37.9 6.9 b 41.5 8.2 44.1 10.6 45.6 14.1 b 47.1 17.5 47.3 21 46.2 24.7 b 44.4 29.6 41.6 34 37.8 37.6 b 34 41.3 29.7 44.3 25 46.5 b 20.3 44.3 16 41.3 12.2 37.6 b 8.4 34 5.6 29.6 3.8 24.7 b 2.6 21 2.8 17.5 4.3 14.1 b 5.8 10.6 8.4 8.2 12.1 6.9 b 16.8 5.6 21.2 6.5 25 9.7 b 28.8 6.5 33.1 5.6 37.9 6.9 l 37.9 6.9{\\p0}", }, ["relocate"] = { }, ["furigana"] = { ["content"] = "{\\an%s\\fs%s\\fscx%s\\fscy%s\\fsp%s\\pos(%s,%s)}%s", ["Yoffset"] = 8, ["Yoffset2"] = -10, ["Yoffset3"] = -8, ["fscx"] = 84, ["fscy"] = 82, }, ["JPN_only"] = { ["fs"] = 74, ["Yoffset"] = 8, ["Yoffset2"] = 6, }, }, ["Noto Sans SC Medium"] = { ["style"] = "sans", ["margin_t"] = 50, ["contentrep"] = { ["？"] = "{\\fscx20} {\\fscx}?{\\fscx80} {\\fscx0}?{\\fscx}", ["！"] = "{\\fscx30} {\\fscx}!{\\fscx70} {\\fscx0}!{\\fscx}", ["…"] = "{\\alpha&HFF&}喵{\\alpha}", ["「"] = "「", [" "] = "{\\fscx200} {\\fscx}", ["」"] = "」", ["・"] = "{\\alpha&HFF&\\fscx72}喵{\\alpha\\fscx}", ["♥"] = "{\\p1\\pbo-5}m 37.9 6.9 b 41.5 8.2 44.1 10.6 45.6 14.1 b 47.1 17.5 47.3 21 46.2 24.7 b 44.4 29.6 41.6 34 37.8 37.6 b 34 41.3 29.7 44.3 25 46.5 b 20.3 44.3 16 41.3 12.2 37.6 b 8.4 34 5.6 29.6 3.8 24.7 b 2.6 21 2.8 17.5 4.3 14.1 b 5.8 10.6 8.4 8.2 12.1 6.9 b 16.8 5.6 21.2 6.5 25 9.7 b 28.8 6.5 33.1 5.6 37.9 6.9 l 37.9 6.9{\\p0}", --[[panda bakery/50]] }, ["relocate"] = { ["…"] = { ["content"] = "{\\an4\\fnNoto Sans JP Medium\\fscx55\\fscy55\\pos(%s,%s)\\fsp-25}・・・", ["Xoffset"] = -6, ["Yoffset"] = 0, ["Yoffset2"] = 0, }, ["・"] = { ["content"] = "{\\an5\\fnNoto Sans JP Medium\\fscx76\\fscy76\\pos(%s,%s)}・", ["Xoffset"] = 0, ["Yoffset"] = 0, ["Yoffset2"] = 0, }, }, ["furigana"] = { ["content"] = "{\\an%s\\fs%s\\fscx%s\\fscy%s\\fsp%s\\pos(%s,%s)}%s", ["Yoffset"] = 22, ["Yoffset2"] = -27, ["Yoffset3"] = -8, ["fscx"] = 84, ["fscy"] = 82, }, }, ["A-OTF Ryumin Pr6N H-KL"] = { ["style"] = "serif", ["margin_t"] = 10, ["contentrep"] = { ["？"] = "？", ["！"] = "！", ["…"] = "…", ["「"] = "「", [" "] = "{\\fscx200} {\\fscx}", ["」"] = "」", ["・"] = "・", ["♥"] = "{\\p1\\pbo-12\\1a&H30&}m 29.5 15.1 b 25.6 15.1 22.1 17.1 20.9 21.7 b 20.9 21.8 20.8 22 20.7 22 b 20.6 22 20.6 21.8 20.5 21.7 b 19.3 17.1 15.8 15.1 11.9 15.1 b 7.2 15.1 3.3 19.4 3.3 25.1 b 3.3 31.2 8.2 35.6 11.3 38.6 b 15.1 42.2 19.1 47.1 20.6 49.6 b 20.7 49.7 20.8 49.7 20.8 49.6 b 22.3 47.1 26.3 42.2 30.1 38.6 b 33.2 35.6 38.2 31.2 38.2 25.1 b 38.2 19.4 34.2 15.1 29.5 15.1{\\p0}", }, ["relocate"] = { }, ["furigana"] = { ["content"] = "{\\an%s\\fs%s\\fscx%s\\fscy%s\\fsp%s\\pos(%s,%s)}%s", ["Yoffset"] = 7, ["Yoffset2"] = -12, ["Yoffset3"] = -7, ["fscx"] = 80, ["fscy"] = 78, }, ["JPN_only"] = { ["fs"] = 68, ["Yoffset"] = 8, ["Yoffset2"] = 6, }, }, ["方正中粗雅宋_GBK"] = { ["style"] = "serif", ["margin_t"] = 62, ["contentrep"] = { ["？"] = "？", ["！"] = "{\\fscx10} {\\fscx}!{\\fscx90} {\\fscx0}!{\\fscx}", ["…"] = "{\\alpha&HFF&}喵{\\alpha}", ["「"] = "「", [" "] = " ", ["」"] = "」", ["・"] = "{\\alpha&HFF&}喵{\\alpha}", ["♥"] = "{\\p1\\pbo-15\\1a&H30&}m 29.5 15.1 b 25.6 15.1 22.1 17.1 20.9 21.7 b 20.9 21.8 20.8 22 20.7 22 b 20.6 22 20.6 21.8 20.5 21.7 b 19.3 17.1 15.8 15.1 11.9 15.1 b 7.2 15.1 3.3 19.4 3.3 25.1 b 3.3 31.2 8.2 35.6 11.3 38.6 b 15.1 42.2 19.1 47.1 20.6 49.6 b 20.7 49.7 20.8 49.7 20.8 49.6 b 22.3 47.1 26.3 42.2 30.1 38.6 b 33.2 35.6 38.2 31.2 38.2 25.1 b 38.2 19.4 34.2 15.1 29.5 15.1{\\p0}", --[[Source Han Sans/60]] }, ["relocate"] = { ["…"] = { ["content"] = "{\\an4\\fnA-OTF Ryumin Pr6N H-KL\\fscx80\\fscy80\\pos(%s,%s)\\fsp-24.5}・・・", ["Xoffset"] = -8, ["Yoffset"] = 0, ["Yoffset2"] = 0, }, ["・"] = { ["content"] = "{\\an5\\fnA-OTF Ryumin Pr6N H-KL\\fscx96\\fscy96\\pos(%s,%s)}・", ["Xoffset"] = 0, ["Yoffset"] = 0, ["Yoffset2"] = 0, }, }, ["furigana"] = { ["content"] = "{\\an%s\\fs%s\\fscx%s\\fscy%s\\fsp%s\\pos(%s,%s)}%s", ["Yoffset"] = 8, ["Yoffset2"] = -10, ["Yoffset3"] = -7, ["fscx"] = 76, ["fscy"] = 74, }, }, } ksy_pandora["Noto Sans TC Medium"] = ksy_pandora["Noto Sans SC Medium"] local function _calwidth(str) local styleref = ksy.copy(line.styleref, 1) if config.JPN_only == true then styleref.fontsize = ksy_pandora[line.styleref.fontname]["JPN_only"]["fs"] end if orgline.styleref["align"] == 7 then str = re.sub(str, "^.*\\\\N", "") end local width = ksy.str(str, styleref).getw() for _search, _replace in pairs(ksy_pandora[line.styleref.fontname]["contentrep"]) do if re.find(str, _search) ~= nil then local _styleref = ksy.copy(styleref, 1) local _width = 0 for _part in re.gsplit(_replace, "\\{", true) do match = re.match(_part, "\\\\fn(.+)\\}") if match ~= nil then _styleref.fontname = match[2]["str"] end match = re.match(_part, "\\\\fscx(\\d*)") if match ~= nil then _styleref.scale_x = tonumber(match[2]["str"]) ~= nil and tonumber(match[2]["str"]) or _styleref.scale_x if match[2]["str"] == "" then _styleref.scale_x = styleref.scale_x end end _width = _width + ksy.str(re.sub(_part, ".+\\}", ""), _styleref).getw() end width = width + (_width - ksy.str(_search, styleref).getw()) * #re.find(str, _search) end end return width end local function _callineleft(init) init = init ~= nil and init or false if init == true then ksy_margin() end if orgline.styleref["align"] == 7 then return orgline.styleref["margin_l"] end local _lineleft = 0 _lineleft = (meta.res_x - _calwidth(line.text_stripped)) * .5 return _lineleft + (math.floor(line.margin_l) - math.floor(line.margin_r)) / 2 end local function _getlineeffects(text) text = text and text or line.text local _effects = "" for str, _, _ in re.gfind(text, "{.*?}") do _effects = _effects .. str end _effects = re.sub(_effects, "\\\\an\\d", "") _effects = re.sub(_effects, "{}", "") return _effects end function ksy_effect(fix_margin) if fix_margin then for _, exec in pairs(config["margin"][line.styleref.name]) do exec[1](exec[2]) end end local effect = config["effect"][line.styleref.name] effect = re.sub(effect, "\\\\an\\d+", "") return effect end function ksy_character() local actor = characters[line.actor] and line.actor or "Blank" if config.JPN_only == true then return characters[actor] .. string.format("{\\fs%s}", ksy_pandora[line.styleref.fontname]["JPN_only"]["fs"]) end return characters[actor] end function ksy_content() local content = line.text local effects = re.find(content, "\\{[^\\}]+\\}") if effects ~= nil then content = re.sub(content, "\\{[^\\}]+\\}", "{}") end if orgline.styleref["align"] == 7 then content = re.sub(content, "^([{}]*)(\\\\N)+", "\\1") line.text_stripped = re.sub(line.text_stripped, "^([{}]*)(\\\\N)+", "\\1") end if orgline.styleref["align"] == 7 and orgline.actor ~= "" then if orgline.layer ~= 9 then content = content .. "」" line.text_stripped = line.text_stripped .. "」" end content = re.sub(content, "^([\\{\\}]*)", "\\1「") line.text_stripped = "「" .. line.text_stripped end content = ksy.rep(content, " ", ksy_pandora[line.styleref.fontname]["contentrep"][" "]) for search, replace in pairs(ksy_pandora[line.styleref.fontname]["contentrep"]) do if search ~= " " then content = ksy.rep(content, search, replace) end end if effects ~= nil then content = re.sub(content, "\\{\\}", function() return table.remove(effects, 1)["str"] end) end if orgline.styleref["align"] == 7 and re.find(content, "\\\\N") ~= nil then content = re.split(content, "\\\\N") content = content[j] ~= nil and content[j] or content[1] end return content end function ksy_style() if orgline.styleref["align"] == 7 then return end config["style"] = ksy_pandora[line.styleref.fontname]["style"] line.styleref = config["stylerefs"][config["style"]][line.styleref.name] config["styleref"]["Sx-jp"] = config["stylerefs"][config["style"]]["Sx-jp"] config["styleref"]["Sx-zh"] = config["stylerefs"][config["style"]]["Sx-zh"] end function ksy_layer() if line.styleref.name == "Sx-zh" or line.styleref.name == "Sx-en" then line.layer = 1 end if orgline.styleref["align"] == 7 and re.find(line.text_stripped, "\\\\N") ~= nil then line.layer = j > #re.find(line.text_stripped, "\\\\N") + 1 and 1 or j end end function ksy_margin() if orgline.styleref["align"] == 7 then if line.margin_t == 0 and re.find(line.text_stripped, "\\\\N") ~= nil then line.margin_t = line.styleref.margin_t + ksy_pandora[line.styleref.fontname]["line_height"] * #re.find(line.text_stripped, "\\\\N") line.margin_t = line.margin_t + ksy_pandora[line.styleref.fontname]["line_height"] * ((j > #re.find(line.text_stripped, "\\\\N") + 1 and 1 or j) - 1) end return end if line.margin_t ~= 0 then if line.styleref.name == "Sx-zh" then local margin_t_diff = config["styleref"]["Sx-zh"]["margin_t"] margin_t_diff = margin_t_diff - config["styleref"]["Sx-jp"]["margin_t"] line.margin_t = line.margin_t + margin_t_diff end end if re.find(line.text, "\\\\an8") ~= nil then line.margin_t = line.margin_t + ksy_pandora[line.styleref.fontname]["margin_t"] end local dialog_start = ksy.sub(line.text_stripped, 1, 1) if dialog_start == "…" then line.margin_r = line.margin_r + _calwidth(dialog_start) + .5 end if dialog_start == "「" then line.margin_r = line.margin_r + _calwidth(dialog_start) * .5 + .5 end local dialog_end = ksy.sub(line.text_stripped, ksy.len(line.text_stripped), 1) if dialog_end == "？" or dialog_end == "！" or dialog_end == "…" then line.margin_l = line.margin_l + _calwidth(dialog_end) + .5 end if dialog_end == "」" then line.margin_l = line.margin_l + _calwidth(dialog_end) * .5 + .5 end if config.JPN_only == true then line.margin_t = (line.margin_t == 0 and line.styleref.margin_t or line.margin_t) + (re.find(line.text, "\\\\an8") ~= nil and ksy_pandora[line.styleref.fontname]["JPN_only"]["Yoffset2"] or ksy_pandora[line.styleref.fontname]["JPN_only"]["Yoffset"]) end end function ksy_time() local start_time = line.start_time local end_time = line.end_time local start_frame = aegisub.frame_from_ms(start_time) local end_frame = aegisub.frame_from_ms(end_time) local start_time_fix = aegisub.ms_from_frame(start_frame) local end_time_fix = aegisub.ms_from_frame(end_frame) line.start_time = math.floor(start_time_fix / 10 + 0.5) * 10 line.end_time = math.floor(end_time_fix / 10 + 0.5) * 10 end ksy.elf = function(line, elfraws, elfindex) local styleref = line.styleref local command_index = elfraws[elfindex]["first"] return { furi = function(num, text, fsc, fsp) if config.JPN_only ~= true and ksy_pandora[styleref.fontname]["JPN_only"] ~= nil then return nil end text = text and text or num num = tonumber(num) and num or ksy.len(num) fsc = tonumber(fsc) and fsc or 100 fsp = tonumber(fsp) and fsp or 0 local befores = string.sub(line.text, 1, command_index - 1) .. "}" befores = re.sub(befores, "{.*?}", "") local init = function() local gjpqy = false local autofsc = true local minfsc = fsc for _, elfraw in ipairs(elfraws) do local ame = ksy.func(elfraw["str"]).parse() local _length = tonumber(ame.args[1]) and tonumber(ame.args[1]) or ksy.len(ame.args[1]) local _text = #ame.args >= 2 and ame.args[2] or ame.args[1] if re.find(_text, "[gjpqy]") ~= nil then gjpqy = true end if #ame.args > 2 then autofsc = false end if autofsc then local width = _calwidth(ksy.sub( re.sub(string.sub(line.text, 1, elfraw["first"] - 1) .. "}", "{.*?}", ""), -_length)) local _width = _calwidth(_text) * ksy_pandora[styleref.fontname]["furigana"]["fscx"] * .01 local _fsc = math.floor(width / _width * 100) if _fsc < minfsc then minfsc = _fsc end end end if autofsc then local width = _calwidth(ksy.sub(befores, -num)) local _width = _calwidth(text) * ksy_pandora[styleref.fontname]["furigana"]["fscx"] * .01 * minfsc * .01 fsp = (width - _width) / (ksy.len(text) + 1) fsp = ksy.round(fsp, 1) fsp = math.max(fsp, 0) end return gjpqy, minfsc end local gjpqy, minfsc = init() local x = _callineleft() + _calwidth(befores) - _calwidth(ksy.sub(befores, -num)) / 2 local y = meta.res_y - ksy.str(line.text_stripped, styleref).geth() - (line.margin_t == 0 and styleref.margin_t or line.margin_t) y = y + ksy_pandora[styleref.fontname]["furigana"]["Yoffset"] if re.find(line.text, "\\\\an8") ~= nil then y = meta.res_y - y + ksy_pandora[styleref.fontname]["furigana"]["Yoffset"] + ksy_pandora[styleref.fontname]["furigana"]["Yoffset2"] elseif gjpqy then y = y + ksy_pandora[styleref.fontname]["furigana"]["Yoffset3"] end text = ("%s{\\fsp}%s"):format(ksy.sub(text, 1, ksy.len(text) - 1), ksy.sub(text, -1)) return { characters["Basic"] .. ksy_effect(false) .. ksy_character() .. _getlineeffects(string.sub(line.text, 1, command_index - 1) .. "}") .. string.format(ksy_pandora[styleref.fontname]["furigana"]["content"], re.find(line.text, "\\\\an8") ~= nil and "8" or "2", minfsc * .01 * (config.JPN_only == true and ksy_pandora[styleref.fontname]["JPN_only"]["fs"] or styleref.fontsize), ksy_pandora[styleref.fontname]["furigana"]["fscx"] * styleref.scale_x * .01, ksy_pandora[styleref.fontname]["furigana"]["fscy"] * styleref.scale_y * .01, (fsp == 0 and "" or fsp), ksy.round(x, 1), ksy.round(y, 1), text) } end, } end function ksy_relocate(res) local relocates = { res } if orgline.styleref["align"] == 7 then for i = 1, (re.find(line.text_stripped, "\\\\N") ~= nil and #re.find(line.text_stripped, "\\\\N") or 0) + 1 do relocates[i] = res end end local in_eff = false for i = 1, ksy.len(line.text) do local char_cur = ksy.sub(line.text, i, 1) if char_cur == "{" then in_eff = true elseif char_cur == "}" then in_eff = false end if in_eff then goto continue end for search, relocate in pairs(ksy_pandora[line.styleref.fontname]["relocate"]) do if char_cur == search then local befores = ksy.sub(line.text, 1, i - 1) befores = re.sub(befores, "{.*?}", "") local twidth, theight = _calwidth(befores), ksy.str(line.text_stripped).geth() local x = _callineleft() + twidth if re.find(relocate["content"], "\\\\an5") ~= nil then x = x + _calwidth(search) / 2 elseif re.find(relocate["content"], "\\\\an6") ~= nil then x = x + _calwidth(search) end local y = meta.res_y - theight / 2 - (line.margin_t == 0 and line.styleref.margin_t or line.margin_t) if orgline.styleref["align"] == 7 then y = meta.res_y - y y = y + ksy_pandora[line.styleref.fontname]["line_height"] * (re.find(befores, "\\\\N") ~= nil and #re.find(befores, "\\\\N") or 0) end x = x + relocate["Xoffset"] y = y + relocate["Yoffset"] if re.find(line.text, "\\\\an8") ~= nil then y = meta.res_y - y + relocate["Yoffset"] + relocate["Yoffset2"] end relocates[#relocates + 1] = characters["Basic"] .. ksy_effect(false) .. ksy_character() .. _getlineeffects(ksy.sub(line.text, 1, i - 1)) .. string.format(relocate["content"], x, y) end end ::continue:: end local elfraws = re.find(line.text, "\\\\[^(]+\\([^)]*\\)") if elfraws ~= nil then for elfindex, elfraw in ipairs(elfraws) do local ame = ksy.func(elfraw["str"]).parse() local elf = ksy.elf(line, elfraws, elfindex) if elf[ame.func] ~= nil then local elf_lines = elf[ame.func](unpack(ame.args)) if elf_lines then ksy.table(relocates).add(unpack(elf_lines)) end end end end if orgline.styleref["align"] == 7 and orgline.actor ~= "" then fad = re.find(line.text, "\\\\fad") ~= nil and "{\\fad" .. re.match(line.text, "\\\\fad(\\([^\\)]+\\))")[2]["str"] .. "}" or "" relocates[#relocates + 1] = characters["actor"] .. fad .. line.actor if j == #relocates then restyle("Rx-actor") end end res = relocates[j] maxloop(#relocates) return res end function output_info(str) function _formatMilliseconds(milliseconds) local seconds = math.floor(milliseconds / 1000) local minutes = math.floor(seconds / 60) local hours = math.floor(minutes / 60) local remainingMinutes = minutes % 60 local remainingSeconds = seconds % 60 local millisecondsPart = milliseconds % 1000 local formattedTime = string.format("%d:%02d:%02d.%02d", hours, remainingMinutes, remainingSeconds, millisecondsPart / 10) return formattedTime end local _info = _formatMilliseconds(line.start_time) .. ": " .. str ksy.debug(_info) end function ksy_check() if orgline.styleref["align"] == 7 then return end local width = _calwidth(line.text_stripped) if width > meta.res_x * .9 then output_info("※Invalid width") end if width > meta.res_x * .8 then output_info("Dangerous width") end local x = (meta.res_x - width) / 2 if x - math.abs((line.margin_l - line.margin_r) / 2) < 0 then output_info("※Invalid edge") end if x - math.abs((line.margin_l - line.margin_r) / 2) < meta.res_x / 2 * (1 - .8) then output_info("Dangerous edge") end if aegisub.frame_from_ms(line.end_time) - aegisub.frame_from_ms(line.start_time) <= 6 then output_info("※Invalid duration") end if aegisub.frame_from_ms(line.end_time) - aegisub.frame_from_ms(line.start_time) <= config["check_duration"] then output_info("Dangerous duration") end local start_frame = aegisub.frame_from_ms(line.start_time) local end_frame = aegisub.frame_from_ms(line.end_time) local start_frame_min_diff = config["check_start_frame"] local end_frame_min_diff = config["check_end_frame"] if keyframes[start_frame] ~= true then for i = start_frame - start_frame_min_diff, start_frame + start_frame_min_diff, 1 do if keyframes[i] then output_info("Dangerous start_frame") end end end if keyframes[end_frame] ~= true then for i = end_frame - end_frame_min_diff, end_frame + end_frame_min_diff, 1 do if keyframes[i] then output_info("Dangerous end_frame") end end end if start_frame - prev_end_frame > 0 and start_frame - prev_end_frame <= 4 then output_info("※Invalid time_interval") end if start_frame - prev_end_frame > 0 and start_frame - prev_end_frame <= config["check_time_interval"] then output_info("Dangerous time_interval") end prev_end_frame = end_frame end
Comment: 0,0:00:00.00,0:00:00.00,Sx-jp,AME,0,0,0,code line,fxgroup.SX = (line.styleref.name ~= "Sx-zh" or config.JPN_only ~= true) if ksy.sub(line.actor, 1, 3) == "fx-" then fxgroup.SX = false end
Comment: 0,0:00:00.00,0:00:00.00,Sx-jp,AME,0,0,0,template pre-line Paulownia-jp fxgroup SX,!ksy_shuusei()!
Comment: 0,0:00:00.00,0:00:00.00,Sx-jp,AME,0,0,0,template line Paulownia-jp notext fxgroup SX,!""!
Comment: 0,0:00:00.00,0:00:00.00,Sx-zh,AME,0,0,0,code line,fxgroup.SX = (line.styleref.name ~= "Sx-zh" or config.JPN_only ~= true) if ksy.sub(line.actor, 1, 3) == "fx-" then fxgroup.SX = false end
Comment: 0,0:00:00.00,0:00:00.00,Sx-zh,AME,0,0,0,template pre-line Paulownia-zh fxgroup SX,!ksy_shuusei()!
Comment: 0,0:00:00.00,0:00:00.00,Sx-zh,AME,0,0,0,template line Paulownia-zh notext fxgroup SX,!""!
Comment: 0,0:00:00.00,0:00:00.00,Ex-invisible,AME,0,0,0,code line all,fxgroup.ZH = (config.JPN_only ~= true)
Comment: 0,0:00:00.00,0:00:00.00,Rx-annotation,AME,0,0,0,code line,fxgroup.RX1 = (line.styleref.fontname == "方正悠宋+ GBK 509R" and fxgroup.ZH) fxgroup.RX2 = (line.styleref.fontname == "方正中粗雅宋_GBK" and fxgroup.ZH) fxgroup.RX3 = (line.styleref.fontname == "方正准雅宋_GBK" and fxgroup.ZH)
Comment: 0,0:00:00.00,0:00:00.00,Rx-annotation,AME,0,0,0,code line,alignment = 7 match = re.match(orgline.text, "\\\\an(\\d)") if match then alignment = match[2]["str"] alignment = tonumber(alignment) end start_fad = true end_fad = true if line.layer == 1 then start_fad = false elseif line.layer == 2 then end_fad = false elseif line.layer == 3 then start_fad = false end_fad = false end
Comment: 0,0:00:00.00,0:00:00.00,Rx-annotation,AME,0,0,0,template line notext fxgroup RX1,!relayer(2)!!ksy.func(function() local text = strrep(line.text_stripped, "？", "? ") remember("text", text) end).run()!!ksy.func(function() local height = ksy.str(recall.text).geth() * (re.find(recall.text, "\\\\N") ~= nil and #re.find(recall.text, "\\\\N") + 1 or 1) remember("height", height) end).run()!!ksy.func(function() local max_width = 0 for part in re.gsplit(recall.text, "\\\\N", true) do if ksy.str(part).getw() > max_width then max_width = ksy.str(part).getw() end end if alignment == 1 or alignment == 7 then max_width = max_width - ksy.str("。").getw() * .5 end remember("width", max_width) end).run()!{\an!alignment!\p1\pos(!ksy.func(function() if alignment == 7 or alignment == 1 then return 25 elseif alignment == 9 or alignment == 3 then return meta.res_x - 25 end end).run()!,!ksy.func(function() if alignment == 7 or alignment == 9 then return 25 elseif alignment == 1 or alignment == 3 then return meta.res_y - 25 end end).run()!)\1c&HFFFFFF&\bord16\blur6\fad(!start_fad and 300 or 0!,!end_fad and 300 or 0!)\fscx100}m 0 0 l 0 !recall.height! l !recall.width! !recall.height! l !recall.width! 0
Comment: 0,0:00:00.00,0:00:00.00,Rx-annotation,AME,0,0,0,template line notext fxgroup RX1,!relayer(3)!!ksy.func(function() local max_width = 0 for part in re.gsplit(recall.text, "\\\\N", true) do if ksy.str(part).getw() > max_width then max_width = ksy.str(part).getw() end end if alignment == 1 or alignment == 7 then max_width = max_width - ksy.str("。").getw() * .5 end remember("width", max_width) end).run()!{\an!ksy.func(function() if alignment == 7 or alignment == 9 then return 7 elseif alignment == 1 or alignment == 3 then return 1 end end).run()!\pos(!ksy.func(function() if alignment == 7 or alignment == 1 then return 25 elseif alignment == 9 or alignment == 3 then return meta.res_x - 25 - recall.width end end).run()!,!ksy.func(function() if alignment == 7 or alignment == 9 then return 25 elseif alignment == 1 or alignment == 3 then return meta.res_y - 25 end end).run()!)\fad(!start_fad and 300 or 0!,!end_fad and 300 or 0!)\3a&HFF&}!strrep(orgline.text,"？","? ")!
Comment: 0,0:00:00.00,0:00:00.00,Rx-annotation,AME,0,0,0,template line notext fxgroup RX2,!relayer(2)!!ksy.func(function() local max_width = 0 for part in re.gsplit(line.text_stripped, "\\\\N", true) do if ksy.str(part).getw() > max_width then max_width = ksy.str(part).getw() end end max_width = max_width - ksy.str("。").getw() * .5 if alignment == 9 or alignment == 3 then max_width = max_width + ksy.str("喵").getw() end remember("width", max_width) end).run()!!ksy.func(function() local height = ksy.str(line.text_stripped).geth() * (re.find(line.text_stripped, "\\\\N") ~= nil and #re.find(line.text_stripped, "\\\\N") + 1 or 1) + 5 * 2 remember("height", height) end).run()!{\an!alignment!\p1\pos(!remember("x", ksy.func(function() if alignment == 7 or alignment == 1 then return 0 elseif alignment == 9 or alignment == 3 then return meta.res_x - 0 end end)).run()!,!remember("y", ksy.func(function() if alignment == 7 or alignment == 9 then return 10 elseif alignment == 1 or alignment == 3 then return meta.res_y - 10 end end)).run()!)\clip(!recall.x > meta.res_x * .5 and meta.res_x - recall.width * 1.1 or 0!,!recall.y > meta.res_y * .5 and meta.res_y - recall.height - 10 or 10!,!recall.x > meta.res_x * .5 and meta.res_x or recall.width * 1.1!,!recall.y > meta.res_y * .5 and meta.res_y - 10 or recall.height + 10!)\3c&HFFFFFF&\bord!recall.width*.1!\be!recall.width*.1*.5*1.5!\1c&HFFFFFF&\fscx0\t(0,!start_fad and 500 or 1!,.4,\1c&H000000&\3c&H000000&\fscx100)\t(!$ldur - (end_fad and 500 or 0)!,!$ldur!,2,)\1c&HFFFFFF&\3c&HFFFFFF&\clip(!recall.x > meta.res_x * .5 and meta.res_x or recall.width * 1.1!)}m 0 0 l 0 !recall.height! l !recall.width*.9! !recall.height! l !recall.width*.9! 0
Comment: 0,0:00:00.00,0:00:00.00,Rx-annotation,AME,0,0,0,template line notext fxgroup RX2,!relayer(3)!{\an!alignment!\pos(!remember("x", ksy.func(function() if alignment == 7 or alignment == 1 then return 0 elseif alignment == 9 or alignment == 3 then return meta.res_x - 0 end end)).run()!,!remember("y", ksy.func(function() if alignment == 7 or alignment == 9 then return 10 elseif alignment == 1 or alignment == 3 then return meta.res_y - 10 end end)).run()!)\alpha&HFF&\1c&H000000&\blur16\t(!start_fad and 500 or 1!,!start_fad and 650 or 1!,.5,\alpha&H00&)\t(!start_fad and 500 or 1!,!start_fad and 800 or 1!,.4,\1c&HFFFFFF&\blur0)\t(!$ldur - (end_fad and 800 or 0)!,!$ldur - (end_fad and 500 or 0)!,2,)\alpha&HFF&\1c&H000000&\blur16)}!orgline.text!
Comment: 0,0:00:00.00,0:00:00.00,Rx-annotation,AME,0,0,0,template line notext fxgroup RX3,!relayer(2)!!ksy.func(function() local text = line.text_stripped local height = ksy.str(text).geth() * (re.find(text, "\\\\N") ~= nil and #re.find(text, "\\\\N") + 1 or 1) local max_width = 0 for part in re.gsplit(text, "\\\\N", true) do if ksy.str(part).getw() > max_width then max_width = ksy.str(part).getw() end end max_width = max_width - ksy.str("。").getw() local bord = 24 local shape = string.format("m 0 0 l 0 %s b 0 %s 0 %s %s %s l %s %s b %s %s %s %s %s %s l %s 0 ", height, height + bord, height + bord, -bord, height + bord, -bord - max_width, height + bord, -bord - bord - max_width, height + bord, -bord - bord - max_width, height + bord, -bord - bord - max_width, height, -bord - bord - max_width) remember("shape", shape) remember("x", meta.res_x - line.styleref.margin_r + 4) remember("frz", 0.025 + height / 10 ^ 5 * 180 / math.pi) local effects = "" local fade_in = "\\\\org(100000,0)\\\\frz-" .. recall.frz .. "\\\\t(0,400,.8,\\\\frz0)" local fade_out = "\\\\fad(0,400)" if start_fad then effects = fade_in end if end_fad then effects = effects .. fade_out end remember("effects", effects) end).run()!{\an7\p1\pos(!recall.x!,0)\1c&HFFF9F0&\3c&HCCCCCC&\bord1\blur4\4c&H000000&\4a&HF0&\xshad12\yshad8!recall.effects!}!recall.shape!!restyle("Ex-effects")!
Comment: 0,0:00:00.00,0:00:00.00,Rx-annotation,AME,0,0,0,template line notext fxgroup RX3,!relayer(3)!!ksy.func(function() local text = line.text_stripped local size = 0 local y = 0 local lines = re.find(text, "\\\\N") ~= nil and #re.find(text, "\\\\N") + 1 or 1 if lines == 1 then size = 24 y = 12 elseif lines == 2 then size = 30 y = 20 elseif lines >= 3 then size = 40 y = 24 end remember("size", size) remember("x", meta.res_x - line.styleref.margin_r - 4) remember("y", y) end).run()!!restyle("Ex-effects")!{\an7\p1\pos(!recall.x!,!recall.y!)\1c&H7642FA&\fscx!recall.size!\fscy!recall.size!\be1!recall.effects!}m 0 0 b 6.794 -6.232 28.105 -39.321 21.837 -54.177 b 12.203 -72.863 -23.644 -72.952 -34.366 -57.524 b -39.428 -52.292 -34.758 -34.203 -30.758 -27.275 b -40.222 -35.667 -47.687 -40.595 -57.615 -41.792 b -72.971 -36.39 -72.524 8.385 -59.328 19.242 b -54.095 24.304 -28.945 17.866 -13.49 6.634 b -31.981 4.608 -54.658 37.33 -54.488 47.624 b -54.55 61.517 -34.158 72.837 -16.935 68.667 b -12.256 116.772 15.084 184.126 56.137 211.231 b 56.869 208.499 57.833 202.169 56.333 199.571 b 14.878 165.77 -8.131 95.916 -10.909 57.105 b -8.579 51.141 -6.651 38.481 -6.687 30.419 b -7.615 44.811 -2.445 63.765 4.519 67.828 b 7.885 71.658 16.179 68.024 22.242 64.524 b 34.242 85.308 73.464 119.244 86.366 147.59 b 88.464 145.224 90.794 139.26 88.294 134.93 b 80.026 116.61 40.536 78.21 29.536 59.158 b 34.732 56.158 44.722 43.462 44.954 39.863 b 37.687 23.275 11.928 4.66 2 3.464 b -1.428 13.526 22.33 28.677 38.687 25.007 b 52.543 17.007 50.863 -25.902 40.033 -34.66 b 30.971 -36.356 -3.536 -14.124 0 0 m -0.536 -8.928 l -4.134 -9.16 l -9.598 -10.624 l -9.33 -6.16 b -12.696 -9.99 -17.062 -15.553 -22.294 -20.615 b -27.428 -31.507 -33.196 -45.497 -31 -53.694 b -21.742 -63.658 5.909 -65.765 15.141 -53.775 b 17.909 -44.981 8.49 -15.294 -0.536 -8.928 m -16.99 0.572 b -19.588 2.072 -24.285 5.938 -28.481 10.67 b -35.909 13.804 -47.435 15.84 -55.131 14.51 b -68.863 -5.275 -62.641 -28.497 -57.579 -33.729 b -49.017 -32.899 -36.454 -25.141 -26.99 -16.749 b -24.856 -11.053 -18.49 -2.026 -16.99 0.572 m -12.99 7.5 b -16.419 17.562 -19.775 43.749 -17.605 57.507 b -17.471 59.739 -18.203 62.471 -19.935 63.471 b -28.229 67.105 -47.122 58.383 -49.524 48.222 b -46.595 37.294 -34.141 20.866 -26.847 15.5 b -20.285 12.866 -15.954 10.366 -12.99 7.5 m 1.536 10.66 b 7.268 16.588 17.098 23.615 24.794 24.945 b 29.392 26.909 34.758 34.203 37.758 39.399 b 37.526 42.997 29.5 51.095 25.67 54.462 b 17.304 41.971 1.438 16.49 1.536 10.66 m -2.392 19.856 b -0.124 27.785 12.376 49.435 18.742 58.462 b 14.412 60.962 10.081 63.462 7.349 62.729 b 0.483 52.837 -3.954 31.151 -2.392 19.856 m 0 0 b 4.696 -3.866 7.526 -8.964 9.624 -11.33 b 18.517 -19.928 32.507 -25.696 37.337 -27.33 b 44.703 -16.572 46.043 5.749 36.553 19.311 b 33.954 20.811 31.222 20.079 28.49 19.347 b 22.258 12.553 9.696 4.794 4.232 3.33 b 2.866 2.964 1 1.732 0 0
Comment: 0,0:00:00.00,0:00:00.00,Rx-annotation,AME,0,0,0,template line notext fxgroup RX3,!relayer(4)!!ksy.func(function() local text = line.text_stripped local max_width = 0 for part in re.gsplit(text, "\\\\N", true) do if ksy.str(part).getw() > max_width then max_width = ksy.str(part).getw() end end remember("max_width", max_width) end).run()!{\bord0\an7\pos(!meta.res_x-line.styleref.margin_r-recall.max_width!,!line.styleref.margin_t!)!recall.effects!}!ksy.func(function() text = orgline.text text = re.sub(text, "・", "·") return text end).run()!
Comment: 0,0:00:00.00,0:00:00.00,Ex-invisible,,0,0,0,,—— SX - effect - 正文修正特效 ——
Comment: 0,0:00:00.00,0:00:00.00,Ex-invisible,,0,0,0,,—— SX - JP - 日文台词 ——
Comment: 0,0:00:00.00,0:00:05.00,Sx-jp,,0,0,150,karaoke,サンプルテキスト？
Comment: 0,0:00:05.00,0:00:10.00,Sx-jp,,0,0,150,karaoke,翻訳とか適当でもいいよ」
Comment: 0,0:00:10.00,0:00:15.00,Sx-jp,,0,0,150,karaoke,「字幕とか儲からないし
Dialogue: 0,0:00:00.00,0:00:05.00,Sx-jp,fx-compare,0,0,0,,サンプルテキスト？
Dialogue: 0,0:00:05.00,0:00:10.00,Sx-jp,fx-compare,0,0,0,,翻訳とか適当でもいいよ」
Dialogue: 0,0:00:10.00,0:00:15.00,Sx-jp,fx-compare,0,0,0,,「字幕とか儲からないし
Comment: 0,0:00:00.00,0:00:00.00,Ex-invisible,,0,0,0,,—— SX - JP - 日文台词 ——
Comment: 1,0:00:00.00,0:00:00.00,Ex-invisible,,0,0,0,,—— SX - ZH - 中文翻译 ——
Comment: 1,0:00:00.00,0:00:05.00,Sx-zh,,0,0,150,karaoke,参考{\furi(2,sample,80)}文本？
Comment: 0,0:00:00.00,0:00:05.00,Rx-annotation,,0,0,0,karaoke,注释：未熟、無常。
Comment: 1,0:00:05.00,0:00:10.00,Sx-zh,,0,0,150,karaoke,「如果你只能说正确的话
Comment: 1,0:00:10.00,0:00:15.00,Sx-zh,,0,0,150,karaoke,那我们没什么好聊的」
Dialogue: 1,0:00:00.00,0:00:05.00,Sx-zh,fx-compare,0,0,0,,参考文本？
Dialogue: 1,0:00:05.00,0:00:10.00,Sx-zh,fx-compare,0,0,0,,「如果你只能说正确的话
Dialogue: 1,0:00:10.00,0:00:15.00,Sx-zh,fx-compare,0,0,0,,那我们没什么好聊的」
Comment: 1,0:00:00.00,0:00:00.00,Ex-invisible,,0,0,0,,—— SX - ZH - 中文翻译 ——
Comment: 0,0:00:00.00,0:00:00.00,Ex-invisible,,0,0,0,,—— FX - 特效生成行 ——
Dialogue: 0,0:00:00.00,0:00:04.98,Sx-jp,,41,0,150,fx,{\blur2}{\3c&H000000&}サンプルテキスト？
Dialogue: 0,0:00:04.98,0:00:09.99,Sx-jp,,20,0,150,fx,{\blur2}{\3c&H000000&}翻訳とか適当でもいいよ」
Dialogue: 0,0:00:09.99,0:00:14.99,Sx-jp,,0,20,150,fx,{\blur2}{\3c&H000000&}「字幕とか儲からないし
Dialogue: 1,0:00:00.00,0:00:04.98,Sx-zh,,53,0,200,fx,{\blur2}{\3c&H000000&}参考{\furi(2,sample,80)}文本{\alpha&HFF&}喵{\alpha}
Dialogue: 1,0:00:00.00,0:00:04.98,Sx-zh,,53,0,200,fx,{\blur2}{\3c&H000000&}{\furi(2,sample,80)}{\an4\fnA-OTF Shin Maru Go Pr6N DB\fscx116\fscy128\pos(1063.65625,847)}？
Dialogue: 1,0:00:00.00,0:00:04.98,Sx-zh,,53,0,200,fx,{\blur2}{\3c&H000000&}{\an2\fs49.6\fscx82\fscy80\fsp\pos(906.3,816)}sampl{\fsp}e
Dialogue: 2,0:00:00.00,0:00:05.00,Ex-effects,,0,0,0,fx,{\an7\p1\pos(1854,0)\1c&HFFF9F0&\3c&HCCCCCC&\bord1\blur4\4c&H000000&\4a&HF0&\xshad12\yshad8\\org(100000,0)\\frz-0.04562648062471\\t(0,400,.8,\\frz0)\\fad(0,400)}m 0 0 l 0 36 b 0 60 0 60 -24 60 l -259.125 60 b -283.125 60 -283.125 60 -283.125 36 l -283.125 0 
Dialogue: 3,0:00:00.00,0:00:05.00,Ex-effects,,0,0,0,fx,{\an7\p1\pos(1846,12)\1c&H7642FA&\fscx24\fscy24\be1\\org(100000,0)\\frz-0.04562648062471\\t(0,400,.8,\\frz0)\\fad(0,400)}m 0 0 b 6.794 -6.232 28.105 -39.321 21.837 -54.177 b 12.203 -72.863 -23.644 -72.952 -34.366 -57.524 b -39.428 -52.292 -34.758 -34.203 -30.758 -27.275 b -40.222 -35.667 -47.687 -40.595 -57.615 -41.792 b -72.971 -36.39 -72.524 8.385 -59.328 19.242 b -54.095 24.304 -28.945 17.866 -13.49 6.634 b -31.981 4.608 -54.658 37.33 -54.488 47.624 b -54.55 61.517 -34.158 72.837 -16.935 68.667 b -12.256 116.772 15.084 184.126 56.137 211.231 b 56.869 208.499 57.833 202.169 56.333 199.571 b 14.878 165.77 -8.131 95.916 -10.909 57.105 b -8.579 51.141 -6.651 38.481 -6.687 30.419 b -7.615 44.811 -2.445 63.765 4.519 67.828 b 7.885 71.658 16.179 68.024 22.242 64.524 b 34.242 85.308 73.464 119.244 86.366 147.59 b 88.464 145.224 90.794 139.26 88.294 134.93 b 80.026 116.61 40.536 78.21 29.536 59.158 b 34.732 56.158 44.722 43.462 44.954 39.863 b 37.687 23.275 11.928 4.66 2 3.464 b -1.428 13.526 22.33 28.677 38.687 25.007 b 52.543 17.007 50.863 -25.902 40.033 -34.66 b 30.971 -36.356 -3.536 -14.124 0 0 m -0.536 -8.928 l -4.134 -9.16 l -9.598 -10.624 l -9.33 -6.16 b -12.696 -9.99 -17.062 -15.553 -22.294 -20.615 b -27.428 -31.507 -33.196 -45.497 -31 -53.694 b -21.742 -63.658 5.909 -65.765 15.141 -53.775 b 17.909 -44.981 8.49 -15.294 -0.536 -8.928 m -16.99 0.572 b -19.588 2.072 -24.285 5.938 -28.481 10.67 b -35.909 13.804 -47.435 15.84 -55.131 14.51 b -68.863 -5.275 -62.641 -28.497 -57.579 -33.729 b -49.017 -32.899 -36.454 -25.141 -26.99 -16.749 b -24.856 -11.053 -18.49 -2.026 -16.99 0.572 m -12.99 7.5 b -16.419 17.562 -19.775 43.749 -17.605 57.507 b -17.471 59.739 -18.203 62.471 -19.935 63.471 b -28.229 67.105 -47.122 58.383 -49.524 48.222 b -46.595 37.294 -34.141 20.866 -26.847 15.5 b -20.285 12.866 -15.954 10.366 -12.99 7.5 m 1.536 10.66 b 7.268 16.588 17.098 23.615 24.794 24.945 b 29.392 26.909 34.758 34.203 37.758 39.399 b 37.526 42.997 29.5 51.095 25.67 54.462 b 17.304 41.971 1.438 16.49 1.536 10.66 m -2.392 19.856 b -0.124 27.785 12.376 49.435 18.742 58.462 b 14.412 60.962 10.081 63.462 7.349 62.729 b 0.483 52.837 -3.954 31.151 -2.392 19.856 m 0 0 b 4.696 -3.866 7.526 -8.964 9.624 -11.33 b 18.517 -19.928 32.507 -25.696 37.337 -27.33 b 44.703 -16.572 46.043 5.749 36.553 19.311 b 33.954 20.811 31.222 20.079 28.49 19.347 b 22.258 12.553 9.696 4.794 4.232 3.33 b 2.866 2.964 1 1.732 0 0
Dialogue: 4,0:00:00.00,0:00:05.00,Rx-annotation,,0,0,0,fx,{\bord0\an7\pos(1585.484375,10)\\org(100000,0)\\frz-0.04562648062471\\t(0,400,.8,\\frz0)\\fad(0,400)}注释：未熟、無常。
Dialogue: 1,0:00:04.98,0:00:09.99,Sx-zh,,0,27,200,fx,{\blur2}{\3c&H000000&}「如果你只能说正确的话
Dialogue: 1,0:00:09.99,0:00:14.99,Sx-zh,,27,0,200,fx,{\blur2}{\3c&H000000&}那我们没什么好聊的」
